# 2022 07 08 Study

1. 빈 스코프
- 빈 스코프란 스프링 빈이 존재할 수 있는 범위를 의미한다
  
- 빈 스코프는 다양한 스코프를 지원한다
  싱글톤 스코프는 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다
  프로토타입 스코프는 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 짧은 범위의 스코프이다
  
  싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링빈을 반환한다
  반면 프로토타입 스코프를 스프링 컨테이너에 조회하면 스프링 컨테이너는 항상 새로운 인스턴스를 생성해서 반환한다.
  스프링 컨테이너는 프로토타입 빈을 생성하고 의존관계 주입, 초기화까지 처리한다 클라이언트에 빈을 반환하고
  이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않는다 프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은
  클라이언트에 있다 그러므로 @PreDestroy 같은 종료 메서드가 호출되지 않는다.
  
  
- 싱글톤 빈 안에 프로토타입 스코프 빈을 사용할 경우 스코프 빈이 새로 생성되지 않고 값이 공유된다는 특징이 있다
  싱글톤 빈 안에 있는 프로토타입 스코프 빈은 주입 시점에 스프링 컨테이너에 요청해서 프로토타입 빈이 새로 생성된 것이지
  사용할 때마다 새로 생성되는것이 아니다 
  
  하지만 실제 원하는 것은 프로토타입 빈 주입 시점에만 새로 생성하는 것이 아닌 사용할 떄마다 새로 생성해서 사용하는 것을 원한다
  싱글톤 빈이 프로토타입을 사용할 떄마다 스프링 컨테이너에 새로 요청하는 것이다
  이러한 방법을 의존관계 조회라고 한다 
  
  의존관계 조회 방법을 사용할 경우 스프링 애플리케이션 컨텍스트 전체를 주입받게 되면 
  스프링 컨테이너에 종속적인 코드가 되고 단위테스트도 어려워진다는 단점이 있다 
  
  프로토타입 빈을 컨테이너에서 대신 찾아주는 DL정도의 기능만 제공하는것이 있으면 되는데 
  ObjectFactory / ObjectProvider 기능이 있다
  
  ObjectProvider란 지정한 빈을 컨테이너에서 대신 찾아주는 DL 기능을 제공해 주는것이 바로 ObjectProvider 이다
  과거에는 ObjectFactory가 있었는데 여기에 편의 기능을 추가한것이 ObjectProvider이다 
  
  ObjectFactory는 기능이 단순하여 별도의 라이브러리가 필요 없다 / 스프링에 의존한다는 특징이 있다
  ObjectProvider는 ObjectFactory 상속 / 옵션 /스트림 처리 등 편의 기능이 많고 별도의 라이브러리 필요 없음 스프링에 의존한다는 특징이 있다
  
  JSR-330 Provider 이라는 자바 표준 기술을 이용해서 DL기능을 사용하는 방법이 있다
  별도의 라이브러리가 필요하고 자바 표준이고 기능이 단순하므로 단위테스트를 만들기가 쉽다 
  자바 표준이므로 스프링이 아닌 다른 컨테이너에서 사용할 수 있다.
  
   
2. 웹 스코프
- 웹 스코프란 웹 환경에서 스프링 빈이 존재할 수 있는 범위를 나타낸다
  웹 스코프는 프로토타입과 다르게 스프링이 해당 스코프의 종료시점까지 관리한다 
  따라서 웹 스코프 종료시점 이전에 종료 메서드가 호출된다.
  
  웹 스코프의 종료는 request / session / application / websocekt이 있다
  request는 HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고 관리된다
  session는 HTTP Session과 동일한 생명주기를 가지는 스코프를 의미한다
  application은 서블릿 컨텍스트와 동일한 생명주기를 가지는 스코프를 의미한다
  websocket은 웹 소켓과 동일한 생명주기를 가지는 스코프를 의미한다 
  
  웹 스코프를 request로 설정할 경우 스프링 웹 어플리케이션 실행시 에러가 발생할 수 있다
  그 이유는 request는 요청이 일어나야 새로운 스프링 빈을 생성하는데 스프링 웹 어플리케이션을 실행할 경우 의존관계 주입으로 인해
  생성되지 않은 request 스코프 스프링 빈을 사용하기 때문에 에러가 발생할 수 있다.
  
  위의 해결 방법은 ObjectProvider를 사용하여 request scope 빈의 생성을 지연시킬 수 있다

  
  다른 방법은 프록시 방법을 사용하여 빈의 생성을 지연시킬 수 있다
  (스코프 어노테이션 설정값을 
   @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS) 이렇게 설정하여 빈의 생성을 지연시킬 수 있다)
  가짜 객체를 스프링 빈으로 등록한 다음 해당 스프링 빈이 사용된다면 그때 request 스코프 스프링 빈을 생성하여 연결시켜주는 방법이다
  
  정리하자면 프록시 객체 덕분에 클라이언트는 마치 싱글톤 빈을 사용하듯이 편리하게 request scope를 사용할 수 있다
  Provider 방법이나 프록시를 사용하는 방법은 진짜 객체 조회를 필요할때 까지 지연처리를 한다
  
  
