# 2022 06 04 Study

1. Spring 
- Spring 이란 자바 언어 기반의 웹 애플리케이션을 만들 수 있는 프레임워크를 의미한다
  (Spring은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크를 의미한다)
  (프레임워크와 라이브러리는 일련의 기능들을 구현한 코드들의 집합을 의미한다
   프레임워크와 라이브러리의 차이는 프레임 워크는 프로그램의 전체 흐름을 제어하는 반면 
   라이브러리는 개발자가 직접 프로그램의 제어흐름을 관리한다는 차이점이 있다
   개발자의 제어흐름을 프레임워크로 넘기것을 제어의 역전(Inversion of Control)이라고 합니다)
  
  (프레임워크란 프로그래머가 작성한 코드를 제어하고 대신 실행해주는것을 의미한다
   라이브러리란 프로그래머가 작성한 코드를 프로그래머가 직접 제어의 흐름을 담당하는것을 의미한다)
  
   
  Spring의 특징은 
  - 자바 객체를 경량 컨테이너로서 자바 객체를 직접 관리한다
    자바 객체의 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다
    (Spring IOC 컨테이너가 관리하고 있는 자바 객체를 Spring Bean 이라고 한다)
    (컨테이너란 객체의 생명주기를 관리하고 생성된 인스턴스들에게 추가적인 기능을 제공하는것을 의미한다)
  
  - 제어의 역전(IOC Inversion of Control)이라는 기술을 통해 애플리케이션의 느슨한 결합을 도모한다
    컨트롤의 제어권이 사용자가 아닌 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다
    
  - 의존관계 주입(DI, Dependency Injection)을 지원한다
    각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다
    
  - 관점 지향 프로그래밍(AOP, Aspect-Oriented Programming)을 지원한다
    트랜잭션이나 로깅, 보안과 같은 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.
    
    
  @RequestBody란 클라이언트가 전송하는 JSON 형태의 HTTP Body 내용을 MessageConverter를 통해 Java Object로 변환시켜주는 역할이다
  (값을 주입하지 않고 값을 변환시키므로 Getter / Setter가 없어도 정상적으로 할당된다)
  @RequestParam은 1개의 HTTP 요청 파라미터를 받기 위해 사용한다
  (@RequestParam은 필수 여부가 true 이기 때문에 기본적으로 반드시 해당 파라미터가 전송되어야 한다)
  @ModelAttribute는 HTTP Body 내용과 HTTP 파라미터의 값들을 생성자 Getter/Setter를 통해 주입하기 위해 사용한다
  (값 변환이 아닌 값을 주입시키므로 변수들의 생성자나 Getter / Setter가 없으면 변수들이 저장되지 않는다)
  
  SpringBoot란 Spring 프레임 워크의 초기설정을 미리 자동화하여 Spring 프레임워크의 사용을 편리하게 해주는 기술을 의미한다.
  
  
2. 객체지향 특징
   객체지향 특징은 추상화 / 캡슐화 / 상속 / 다형성이 있다
   추상화란 불필요한 정보를 숨기고 중요한 정보만을 표현함으로써 공통의 속성이나 기능을 모아 이름을 붙이는것을 의미한다
   캡슐화란 관련이 있는 변수와 함수를 하나의 클래스로 모아 외부에서 쉽게 접근하지 못하도록 은닉하는것을 의미한다
   상속이란 기존의 클래스에 기능을 더하거나 재정의하여 새로운 클래스를 정의하는것을 의미한다
   다형성이란 하나의 객체가 여러가지 타입을 가질수 있도록 하는것을 의미한다
   
   객체지향 프로그래밍이란 하나의 독립된 단위인 객체들의 모임으로 프로그래밍을 파악하는것을 의미한다
   객체지향의 장점은 
   코드의 재사용성이 용이하다 (상속을 이용하여 확장이 가능하다)
   유지보수가 쉽다는 장점이 있다(객체별로 역활을 나눠놨으므로 해당 부분만 수정하면 되므로 유지보수가 쉽다)
   
   객체지향의 단점은
   처리속도가 상대적으로 느리다
   설계시 많은 시간과 노력이 필요하다
   
   
   스프링 프레임워크는 다형성의 기능을 극대화해서 이용할 수 있게 도와준다
   역할(인터페이스) 구현(구현클래스)를 분리하여 다형성을 구현한다
   역할과 구현을 구분하면 유연하고 변경이 용이해지며 확장가능한 설계가 가능해진다
   또한 클라이언트에 영향을 주지않고 변경이 가능해진다는 장점이 있다.
   
   스프링에서는 이야기하는 제어의 역전(IoC)와 의존관계 주입(DI)은 다형성을 이용하여 역할과 구현을 
   편리하게 다룰 수 있도록 지원한다.
   
   
3. 좋은 객체 지향 설계의 5가지 원칙 (SOLID)
   - SRP 단일 책임의 원칙 (Single responsibilit principle)
     한 개의 클래스는 하나의 책임만 가져야 한다.
    (변경이 있을때 파급 효과가 적으면 단일 책임의 원칙을 잘 따른것이다)
    
   - OCP 개방 폐쇄의 원칙 (Open / closed principle)
     소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다
     (확장을 위해 클라이언트 코드를 변경할 경우 OCP를 위반하게 된다)
   
   - LSP 리스코프 치환 원칙 (Liskov substitution principle)
     프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바뀔 수 있어야 한다
     
   - ISP 인터페이스 분리 원칙(Interface segregation principle)
     특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다
   
   - DIP 의존관계 역전 원칙 (Dependency inversion principle)
     프로그래머는 추상화에 의존해야지 구체화에 의존하면 안된다 
     (구현클레스에 의존하지 않고 인터페이스에 의존해야된다)
     
     
4. 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다
   (다형성 만으로는 OCP, DIP를 지킬 수 없다)
   
   스프링은 DI(의존관계 주입)기술로 다형성과 OCP(개방 폐쇄의 원칙) , DIP(의존관계 역전 원칙)을 가능하도록 지원해준다
   그러므로 클라이언트의 코드 변경없이 기능 확장이 가능해진다
   
   기존 코드에서는 하나의 클래스에서 구현클래스와 인터페이스를 연결하는 역할까지 하므로
   인터페이스 뿐만 아니라 구현 클래스까지 모두 의존하는 문제점이 있다 
   
   해결방안은 애플리케이션의 동작 방식을 구성하기 위해 구현 객체를 직접 생성하고 연결하는 책임을 가지는 별도의 클래스를 만들었다
   (예시에서는 AppConfig 라는 클래스를 생성해서 인터페이스에 구현클래스를 연결하여 생성한 뒤 반환해주었다)
   인터페이스와 구현클래스를 연결해주는 클래스를 생성함으로써 다른 클래스들은 의존관계에 대한 고민은 안하고
   실행에만 집중하도록 프로그래밍 설계를 변경하였다. 
   인터페이스와 구현클래스를 외부에서 연결해주므로 구현 클래스에 의존하지 않게되므로 OCP원칙과 DIP 원칙을 지킬 수 있게 되었다.
   
   프로그램의 제어흐름을 직접 제어하는것이 아닌 외부에서 관리하는것을 제어의 역전이라고 한다
   (각 인스턴스와 클래스의 생성은 AppConfig라는 외부클래스에서 생성되고 관리되는데 
   이렇게 외부에서 프로그램의 제어 흐름을 관리하는 것을 제어의 역전이라고 한다)
   
   애플리케이션의 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 
   클라이언트와 서버의 실제 의존 관계가 연결 되는 것을 의존관계 주입이라고 한다.
   
   의존관계 주입을 사용하면 클라이언트의 코드를 변경하지 않고 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
   
   AppConfig처럼 객체를 생성하고 관리하고 의존관계를 연결해주는것을 Ioc 컨테이너 또는 DI 컨테이너라고 한다.
   
 
5. 스프링 프레임워크를 이용하여 의존관계 주입과 제어의 역전을 쉽게 구현할 수 있게된다
   @Configuration 어노테이션은 스프링 빈 설정을 하게 될 클래스임을 설정하는 어노테이션이다
   @Bean 어노테이션은 개발자가 직접 제어가 불가능한 외부 라이브러리 등을 Bean 으로 등록할 때 사용한다
   @Bean 어노테이션으로 등록한 스프링 빈은 @Bean이 붙은 메서드 명으로 스프링 빈의 이름으로 사용한다
   (Spring Bean 이란 Spring 컨테이너가 관리하고 있는 자바 객체를 의미한다)
   (ApplicationContext을 스프링 컨테이너라고 한다)
 
   기존에는 개발자가 AppConfig를 사용해서 직접 객체를 생성하고 DI를 했지만 이제부터는 스프링 컨테이너를 통해서 사용한다
   그리고 기본에는 개발자가 필요한 객체를 AppConfig를 사용해서 직접 조회했지만 이제부터는 스프링 컨테이너를 통해서
   필요한 스프링 빈(객체)를 찾아야 한다.
   기존에는 개발자가 직접 자바코드로 모든 것을 했다면 이제부터는 스프링 컨테이너에 객체를 스프링 빈으로 등록하고
   스프링 컨테이너에서 스프링 빈을 찾아서 사용하도록 변경되었다.
   
   스프링 컨테이너는 XML 기반으로 만들 수 있고 어노테이션 기반의 자바 설정 클래스로 만들 수 있다
   
   스프링 컨테이너는 
   1. 클래스 정보를 지정해서 스프링 컨테이너를 생성한다.
   2. 스프링 컨테이너는 설정 클래스 정보를 이용하여 스프링 빈을 등록한다
   3. 스프링 컨테이너에 있는 스프링 빈 의존관계를 설정한다
      (스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입(DI) 한다)
    
   스프링 빈을 부모 타입으로 조회하면 자식 타입도 함께 조회된다
   그래서 모든 자바 객체의 최고 부모인 Object 타입으로 조회하면 모든 스프링 빈을 조회한다.
   
   BeanFactory는 스프링 컨테이너의 최상위 인터페이스이다
   스프링 빈을 관리하고 조회하는 역할을 한다 (getBean() 을 담당한다)
   
   ApplicationContext는 BeanFactory 기능을 모두 상속받아서 제공한다
   ApplicationContext는 빈을 관리하고 조회하는 기능뿐만 아니라 수 많은 부가 기능을 제공해준다.
   
   BeanFactory나 ApplicationContext를 스프링 컨테이너라고 한다.
   
   스프링 컨테이너는 다양한 형식의 설정 정보를 받아들일 수 있게 유연하게 설계되어있다
   (자바 코드(어노테이션), XML 등)
   XML로도 스프링 컨테이너를 등록할 수 있는데 GenericXmlApplicationContext를 사용하면서 xml 설정 파일을 넘기면 된다.
   
   XML, 자바 코드를 읽어서 BeanDefinition이라는 빈 설정 메타 정보를 만들고
   스프링은 빈 설정 메타 정보를 갖고 다양한 설정 형식을 지원해준다.
   스프링 컨테이너는 빈 설정 메타 정보를 기반으로 스프링 빈을 생성한다.
   
   
   
