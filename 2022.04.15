# 2022 04 15 Study

1. 프로그래밍이란 
- 프로그래밍 언어를 이용해서 구체적인 프로그램을 작성하는 과정이다.

2. 컴파일이란
- 프로그래밍 언어(java)를 바이트코드(.class)로 변환하는 과정이다.

3. JDK, JRE, JVM
- JDK란 Java Development kit인데 Java로 소프트웨어를 개발할 수 있도록 여러 기능들을 제공하는 소프트웨어 패키지이다
- JRE란 Java Runtime Environment 인데 자바 프로그램이 실행되는 환경이다
- JVM이란 Java Virtual Machine 인데 자바 프로그램을 컴파일하여 만든 바이트코드를 실행시키기 위한 가상머신이다 

4. 라이브러리란 
- 필요한 기능들이 모여있는 코드들의 집합이다.

5. 자바 프로그래밍의 장점 
- 플랫폼의 영향을 받지 않으므로 다양한 환경에서 사용이 가능하다.
- 객체 지향 언어이기 때문에 유지보수가 좋고 확장성이 좋다
- 프로그램이 안정적이다
- 풍부한 기능이 제공되는 오픈 소스이다.

6. module이란
- 외부에서 재사용할 수 있는 패키지들을 모아놓은 것이다.
- 이클립스의 프로젝트는 하나의 모듈을 개발하는 것이다.

7. workspace / project / package / class
- workspace란 하나의 프로그램 단위를 의미하고 여러 프로젝트를 관리한다.
- project란 하나의 실행파일의 단위를 의미하고 여러 package를 관리한다.
- package란 클래스를 기능별로 모아둔 일종의 카테고리이다.
- class란 객체지향 프로그래밍에서 객체를 의미하며 맴버변수와 메서드를 가지고 있는 객체이다.

- 객체란 구체적이거나 추상적인 데이터의 단위를 의미한다.
- 인스턴스는 new 키워드를 이용하여 클래스를 Heap 메모리 영역에 생성한 상태를 의미한다.
  (객체를 사용할려면 반드시 new 키워드로 객체를 생성해서 사용해야된다)

8. 자바에서 상수화를 시킬려면 final 키워드를 붙이면 된다.

9. 리터럴이란 소스코드 내에서 직접 입력된 값을 의미한다.
예) 0b, 0x, '한' 등등

10. 함수란 하나의 기능을 구현한 일련의 코드집합이다.

10. 맴버변수 / 메소드
- 맴버변수는 객체의 속성을 저장하는 데이터를 의미한다.
- 메소드는 맴버함수를 의미하며 객체의 기능을 구현하기 위해 클래스 내부에서 구현되는 함수이다.

11. 참조변수란
- 참조변수는 메모리에 생성된 인스턴스를 가리키는 변수이다.
- 참조 값은 생성된 인스턴스의 메모리 주소 값을 의미한다.

12. 생성자란 클래스를 생성할때 실행되는 메소드를 의미하며 주로 맴버변수를 초기화하는 역할을 한다.
    클래스를 정의할때 생성자를 정의하지 않으면 기본 생성자가 컴파일러에 의해 알아서 생성되며
    맴버변수는 알아서 초기화가 된다.
    만약 생성자를 정의했다면 기본 생성자는 정의되지 않으며 기본생성자가 필요할 경우 프로그래머가 직접 생성해줘야된다.
    
    맴버변수는 기본 생성자에 의해 초기화를 하지 않아도 사용이 가능하지만
    지역변수는 초기화를 해주지 않는다면 사용이 불가능하다.
    
13. 오버로딩 / 오버라이딩 
- 오버로딩이란 한 클래스내에서 같은 이름의 메소드가 있더라도 매개변수나 타입이 다르다면 같은 이름의 메소드를 정의할 수 것을 의미한다.
- 오버로딩이란 부모클래스에서 상속받은 메소드를 자식클래스에서 재정의하는것을 의미한다.

- 오버로딩은 리턴형이 달라도 되며 / 메소드 명은 동일해야되며 / 매개변수는 타입이나 개수가 달라야된다 / 같은 클래스 내에서 적용된다
- 오버라이딩은 리턴형이 동일해야되며 / 메소드 명은 동일해야되며 / 매개변수는 동일해야되며 / 상속 관계에서 적용된다

14. 접근 제어 지시자
- 접근 제어 지시자란 클래스 외부에서 클래스의 맴버변수나 메소드를 사용할 수 있는지 지정하는 키워드이다
- 접근 제어 지시자는 public / default / protected / private 가 있다
- public 이란 어디서든 맴버변수나 메소드에 접근이 가능하다고 지정하는 키워드이다
- default 란 접근 제어 지시자를 선언하지 않을경우 자동으로 적용되며 같은 패키지 내에서만 사용이 가능하다고 지정하는 키워드이다 (상속관계여도 패키지가 다르면 사용이 불가능하다)
- protected 란 같은 패키지나 상속받은 클래스에서 접근이 가능하다고 지정하는 키워드이다.
- private란 같은 클래스 내부에서만 접근이 가능하다고 지정하는 키워드이다.




