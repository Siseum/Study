# 2022 04 18 Study

1. Object class
- Object class란 모든 클래스의 최상위 클래스이다.
- 모든 클래스는 Object class를 상속받는다

- toString() 함수는 객체의 정보를 문자열로 변환해준다.
- hashCode() 함수는 인스턴스의 저장 주소를 반환해준다.

- 두 인스턴스가 같다는것은 두 인스턴스의 equal() 함수 반환 값이 true 이고 동일한 hashCode() 값을 반환한다.
- 논리적 동일함을 위해 equals() 메서드를 재정의하였다면 hashCode() 메서드도 재정의하여 동일한 hashCode() 값이 반환하도록 한다.

2. Clone()
- Clone() 함수는 객체의 원본을 복사하는 메서드이다
- Clone() 함수는 객체 지향 프로그래밍의 정보 은닉과 객체 보호의 관점에서 위배될 수 있다 
  그러므로 Clone() 메서드 사용을 허용한다는 의미로 cloneable 인터페이스를 명시한다. (implements cloneable)
- Clone() 메서드로 객체를 복사할 경우 얕은 복사가 아닌 깊은 복사로 객체가 복사된다.

3. String의 문제점
- String은 문자열을 변경할 경우 새로운 메모리를 계속 생성하여 메모리 낭비의 문제점이 있다.
- 그러므로 가변적으로 문자열을 설정할 수 있는 StringBuilder나 StringBuffer 클래스를 이용한다.
- StringBuilder는 단일 쓰레드 환경에서 사용한다 / StringBuffer는 멀ㄹ티 쓰레드 환경에서 사용한다.

4. Class 클래스
- Class 클래스란 Class 파일에서 클래스의 맴버변수, 메서드, 생성자등의 정보를 얻어올 수 있는 클래스이다
- forName() 함수를 이용하여 runtime 중에 클래스의 정보를 얻어올 수 있는데 이를 동적 로딩이라고 한다.

- forName() 함수로 클래스 정보를 얻어오거나 생성한 인스턴스에서 getClass() 함수로 클래스 정보를 얻어올 수 있다.
- 얻어온 클래스 정보를 Class 클래스 변수에 저장하고 그 Class 클래스를 newInstance() 함수로 클래스를 생성한다.
- Parameter Type도 Class 클래스로 저장하며 ParameterType과 클래스의 정보를 이용하여 getConstructor() 함수로 생성자의 정보를 얻어올 수 있다.
- Parameter의 내용은 Object 클래스로 저장하며 얻어온 생성자와 Parameter를 이용하여 newInstance() 함수로 클래스 인스턴스를 생성할 수 있다.
  
5. 자료구조
- 자료구조란 데이터를 효율적으로 접근하거나 수정하거나 저장하기 위해 사용하는 데이터의 집합을 의미한다.

6 배열
- 배열이란 선형으로 자료들을 관리하고 정해진 크기의 메모리를 할당받아 사용한다
- 자료의 물리적 위치와 논리적 위치가 같다
- 자료의 접근시간은 빠르지만 자료를 추가하거나 삭제할때 처리 속도가 느리다

7. 연결리스트
- 연결리스트는 선형으로 자료를 관리하고 자료가 추가될때마다 메모리를 할당받는다
- 자료는 노드로 관리하며 노드의 연결로 구현되어있다
- 자료의 접근시간은 느리지만 자료를 추가하거나 삭제할때 처리 속도가 빠르다

8. 스택
- 스택은 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료구조이다

9 큐
- 큐는 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료구조이다

10. Tree
- 트리란 부모 노드와 자식 노드간의 연결로 이루어진 자료구조이다

11. Heap
- 힙이란 완전 이진트리를 기반으로한 자료구조이다 
- 최대힙은 부모노드가 자식노드보다 큰 이진트리이며 최소 힙은 부모노드가 자식노드보다 작은 이진트리이다

12. 그래프
- 그래프란 정점과 간선들간의 유한집합이다

13. hashing
- 해싱이란 자료검색을 위한 자료구조이며 키와 value를 한 쌍으로 저장하는 자료구조이다
- 키는 중복될 수 없으며 키를 통해 value를 얻어오는 자료구조이다 

14. 제네릭
- 제네릭이란 데이터 타입을 일반화하는 문법이다
- 클래스나 메서드에서 사용할 데이터 타입을 컴파일 시 미리 지정하는 방법이다.
- 여러 타입을 사용하는 경우 Object 클래스로 객체를 반환하여 사용했지만 이럴경우 다시 원래의 타입으로 변경하는
  다운 캐스팅을 해서 사용해야되는데 다운 캐스팅시 에러가 발생할 수 있고 다운캐스팅이 번거롭다는 단점이 있었다.
  제네릭을 사용하는 이유는 미리 타입을 지정해줘서 사용하므로 타입 캐스팅을 할 필요가 없다는 장점이 있다.
  
- 제네릭 T 자료형의 범위를 제한할 수 있다
  T extends 문법을 이용해서 해당 클래스를 상속받은 클래스만 제네릭 T가 되도록 제네릭 자료형 T의 범위를 설정할 수 있다.
  예) public class GenericPrinter<T extends Material> 
  { 
    ...
  }  
  // Material 클래스를 상속받은 클래스만 제네릭 T가 될 수 있다.

15. iterator
- iterator는 자바 컬렉션 프레임 워크에 있는 요소들을 참조하는 것이다.
- ArrayList의 경우 차례로 get() 함수를 통해 ArrayList에 있는 요소를 가져올 수 있지만
- map이나 hashmap의 경우 논리적인 순서대로 자료를 저장하는것이 아니라 순회가 불가능하다.
  그래서 자바 컬렉션 프레임 워크에 있는 요소들을 참조할 수 있는 iterator를 이용하여 자바 컬렉션 프레임워크에 있는 요소들을 순회할 수 있다.
  예) Iterator<Member> ir = arrayList.iterator(); // iterator() 함수로 Iterator을 얻어온다.
      ir.hasNext() // hasNext() 함수는 현재 iterator 다음에 요소가 더 있는지 체크해서 요소가 있으면 true / 없으면 false를 반환한다.
      ir.next() // next() 함수는 현재 iterator 다음에 있는 요소를 반환하고 iterator 포인터를 다음 요소로 이동시킨다.

- 자바 컬렉션 프레임워크란 객체나 데이터들을 효율적으로 관리하기 위해 사용하는 라이브러리를 의미한다.

  
   
