# 2022 04 21 Study

1. 프로세스
- 프로세스란 메모리를 할당받아 실행되고 있는 프로그램을 의미한다.

2. 스레드
- 스레드란 프로세스 내에서 작업을 처리하고 있는 단위를 의미한다.
- 스레드는 독립적인 메모리 공간을 갖고 있다.

- 자바에서 스레드를 2가지 방법으로 만들 수 있다.
- 1. Thread 클래스를 상속하여 run() 메서드를 오버라이딩 하여 생성하는 방법이 있다.
- 2. 스레드를 생성할려는 클래스가 이미 상속되어있다면 Runnable 인터페이스를 상속하여
     Run() 메서드를 오버라이딩 하여 생성하는 방법이 있다.
     
- 자바에서 스레드를 생성 후 스레드의 작업 호출은 start() 함수를 호출하면되고 start() 함수가 호출되면
  Thread 클래스를 상속하거나 Runnable 인터페이스를 상속한 클래스의 run() 메서드가 호출된다.
     
- 자바에서 스레드의 작업 우선순위를 setPriority() 함수로 설정할 수 있다
- 스레드의 우선순위가 높다고 해서 무조건 먼저 처리하는것이 아니라 먼저 처리될 확률을 높여준다.

- 다른 스레드의 결과를 얻어올때까지 자신의 스레드를 잠시 중단해야되는 경우에 사용하는 함수는 join() 메서드를 사용한다. 
  join() 메서드를 사용하면 다른 스레드가 종료될때까지 현재 자신의 스레드는 일시 정지한다.

3. 임계영역
- 임계영역이란 여러개의 프로세스나 스레드가 공유 자원에 접근할려는 부분을 임계영역이라고 한다.

4. Race Condition
- 여러개의 프로세스가 하나의 자원을 접근할려고 경쟁하는 상태를 의미한다.

5. 세마포어 / 뮤텍스
- 임계영역을 서로 접근할려는 Race Condition 문제를 해결하기 위해 세마포어나 뮤텍스 방법을 사용한다.

- 세마포어란 공유자원에 접근할 수 있는 프로세스나 스레드의 개수를 제한할 수 있는 방법이다.
- 뮤텍스란 공유자원에 접근할 수 있는 프로세스나 스레드의 개수를 1개로 제한하는 방법이다.
- 세마포어와 뮤텍스의 차이는 세마포어는 임계영역에 접근 가능한 프로세스나 스레드의 개수를 1개 이상으로 설정할 수 있지만
  뮤텍스는 반드시 임계영역에 접근 가능한 프로세스나 스레드의 개수를 1개로 설정한다는 차이점이 있다.
  
6. 동기화
- 동기화란 여러개의 스레드가 하나의 공유자원을 사용할려고 할 때 
  한개의 스레드만 공유자원에 접근하고 나머지 스레드들은 공유자원에 접근 못하도록 방지하는 기술이다.
 
- 동기화를 하지 않고 여러개의 스레드가 동시에 공유자원에 접근해서 공유자원을 수정한다면 
  해당 공유자원의 값을 예측할 수 없으므로 여러개의 스레드가 공유자원에 접근할려고 할때 동기화를 해야된다.
  
- 자바에서 동기화를 구현하는 방법에는 2가지 방법이 있는데
  1. synchronized 키워드를 메서드에 추가하여 동기화를 구현한다.
     동기화 할려는 메서드에 synchronized 키워드를 붙이고 해당 동기화된 메서드를 실행한다면 메서드가 포함된 객체도 lock이 된다.
     
  2. synchronized block 을 이용해서 동기화를 구현한다.
  synchronized(lock을 걸 객체)
  {
      ...
      // synchronized block에서 작업을 할 경우 lock을 걸 객체는 lock이 되어 다른 프로세스나 스레드가 접근하지 못한다.
  }
  
7. 데드락
- 둘 이상의 프로세스가 공유하고 있는 자원에 대해 서로 대기 상태일때 무한 대기 상태가 되는데 이를 데드락이라고 한다.
- 자바에서는 데드락 체크 기능이 없으므로 서로 synchronized 메서드에서 다른 synchronized 메서드를 되도록 호출하지 않도록 한다.

8. wait() / notify() / notifyAll()
- wait() 메서드는 해당 스레드를 non-runnable 상태로 만드는 메서드이다.
- 한정된 공유 자원을 스레드가 접근할 경우 몇몇의 스레드는 한정된 공유자원에 접근할수가 없으므로 
  다른 스레드가 한정된 자원을 처리될때까지 기달려야되는데 이때 사용하는 메서드가 wait() 메서드이다.
  wait() 메서드를 실행하면 해당 스레드는 non-runnable 상태가 되며 다른 스레드가 notify() 메서드나 notifyAll() 메서드가 호출되어
  non-runnable 상태를 해줘야지 다시 thread가 실행된다. wait() 상태에서 해제되고 스레드가 재시작 된다.
  
- notify() / notifyAll() 메서드는 non-runnable 인 스레드를 해제하는 메서드이다.
- notify() 메서드는 non-runnable 스레드중에 1개인 스레드를 랜덤으로 non-runnable 상태를 해제하는 역할을 한다.
- notifyAll() 메서드는 non-runnable 스레드를 non-runnable 상태를 모두 해제하는 역할을 한다.
 
 
 
