# 2022 05 24 Study 

인프런 강의 실전! 스프링 부트와 JPA 활용1 강의를 듣고 공부한 내용 리뷰

1. 엔티티 설계시 주의점

- 엔티티에는 가급적 Setter를 사용하지 말자
  Setter가 모두 열려있을 경우 변경 포인트가 많아 유지보수가 어렵다 / 나중에 리펙토링으로 Setter를 제거한다 
  
- 모든 연관관계는 지연로딩(LAZY)으로 설정한다
  즉시 로딩(EAGER)은 예측이 어렵고 어떤 SQL이 실행될지 추척하기 어렵다 
  특히 즉시로딩 설정에서 JPQL을 실행할때 N+1 문제가 자주 발생한다.
  연관된 엔티티를 함께 DB에서 조회하면 fetch join 또는 엔티티 그래프 기능을 이용한다
  XToOne(OneToOne, ManyToOne) 관계는 기본이 즉시 로딩이므로 직접 지연로딩으로 설정해야 한다.
  
  즉시로딩(EAGER)란 데이터를 조회할 때 연관된 모든 객체의 데이터까지 한번에 불러오는것이다
  지연로딩(LAZY)란 필요한 시점에 연관된 객체의 데이터를 불러오는것이다.
  
  N+1 문제란 엔티티(1)를 조회할 때 연관관계의 데이터 개수(N)만큼 조회 쿼리가 추가로 발생하는 문제를 의미한다.
  (지연 로딩을 할 경우 해당 entity를 프록시로 설정하고 해당 entity를 사용할때 쿼리문을 데이터베이스에 전달하는데
  처음 find를 할 경우 N+1이 발생하지 않지만 추가로 Entity의 내용을 사용할때 Entity 프록시 객체에 대한 쿼리를 발생하므로
  결국 지연로딩에서도 N+1 문제가 발생한다)
  
  N+1 문제를 해결하기 위해 페치 조인(fetch join)기능을 활용한다.
  페치 조인(fetch join)이란 연관된 엔티티나 컬렉션을 한번에 같이 조회하는 기능을 의미한다.
  페치 조인을 할 경우 SQL 쿼리 한번으로 연관된 엔티티들을 함께 조회할 수 있어서 SQL 호출 회수를 줄여 성능을 최적화 할 수 있다
  
  페치 조인의 한계에는
  - 페치 조인 대상에는 별칭을 줄 수 없다
  JPA 표준에서는 지원하지 않지만 하이버네이트에서 페치 조인 대상에 별칭을 줄 수 있다
  하지만 별칭을 잘못 사용하면 연관된 데이터 수가 달라져 데이터 무결성이 깨질 수 있으므로 사용하지 않는것이 좋다
  
  - 컬렉션을 페치조인 할 경우 페이징 API(setFirstResult, setMaxResults)를 사용할 수 없다
  데이터가 많은데 페이징을 할 경우 몇개의 데이터들이 손실될 수 있으므로 페치조인을 할 경우 페이징 기능을 사용할 수 없다
  
  
- 컬렉션은 필드에서 바로 초기화 한다
  컬렉션은 필드에서 바로 초기화 하는 것이 안전하다.
  null 문제에서 안전하다 
  하이버네이트는 엔티티를 영속화 할 떄 컬렉션을 감싸서 하이버네이트가 제공하는 내장 컬렉션으로 변경해서 관리하는데
  만약 getOrders() 처럼 임의의 메서드에서 컬랙션을 잘못 생성하면 하이버네이트 내부 메커니즘에 문제가 발생할 수 있다
  그래서 컬렉션은 필드에서 바로 초기화해서 사용하는것이 좋다.
  
  
- 테이블, 컬럼명 생성 전략
  스프링 부트에서 하이버네이트 기본 매핑 전략을 변경해서 실제 테이블 필드명은 다르다
  
  하이버네이트의 기본 매핑 전략은 엔티티의 필드명을 그대로 테이블의 컬럼명으로 사용한다
  스프링 부트의 매핑 전략은 
  엔티티의 필드명을 카멜케이스에서 언더스코어로 변경하고
  .을 _로 변경하고
  대문자를 소문자로 변경한다
  
  
2. 애플리케이션 개발
- 인터넷 주문 서비스를 개발한다.
  애플리케이션은 
  controller, web) 웹 계층을 담당한다
  service) 비즈니스 로직, 트랜잭션을 처리한다
  repository) JPA를 직접 사용하는 계층이고 엔티티 매니저를 사용한다
  domain) 엔티티가 모여 있는 계층이고 모든 계층에서 사용한다.
  
  개발 순서는 서비스 / 리포지토리 계층을 개발하고 테스트 케이스를 작성해서 검증 마지막에 웹 계층을 적용한다.
  
  회원 리포지토리)
  회원 리포지토리는 회원을 저장할 save() 메서드 / 아이디로 회원을 찾는 findOne()메서드 
  / 전체 회원을 찾는 findAll() 메서드 / 이름으로 멤버를 찾는findByName() 메서드가 있다.
  
  리포지토리에서 데이터 베이스의 저장 / 관리 / 삭제 작업을 처리할 EntityManager를 생성한다.
  EntityManager를 SpringBean으로 등록하기 위해 @PersistenceContext 어노테이션이나 @Autowired 어노테이션을 사용해야되는데
  Lombok 기능을 이용하여 @RequiredArgsConstructor 어노테이션을 이용하여 생성자 주입으로 EntityManager를 SpringBean으로 등록한다
  (@RequiredArgsConstructor 어노테이션은 final 맴버 변수로 생성자를 만드는 어노테이션이다)
  
  의존성 주입 방법은
  생성자 주입 방법 / Setter 주입 방법 / 필드 주입 방법이 있다
  
  생성자 주입 방법은 생성자의 호출 시점에 1회 호출 되는것이 보장된다 
  그러므로 주입받은 객체가 변하지 않거나 반드시 객체의 주입이 필요한 경우에 강제하기 위해 사용할 수 있다.
 
  수정자 주입 방법은 Setter를 통해서 의존관계를 주입하는 방법이다
  주입 받는 객체가 변경될 경우에 사용된다 (하지만 주입받는 객체가 변경될 가능성은 극히 드물다)
  
  필드 주입 방법은 필드에 바로 의존관계를 주입하는 방법이다
  하지만 외부에서 접근이 불가능하다는 단점도 있고 테스트 코드에서 의존받는 객체를 접근할 수 없어 추천하지 않는 방법이다
  
  의존성 주입 방법에서는 생성자 주입 방법을 추천하는데
  생성시 1번만 초기화 되므로 객체의 불변성을 확보할 수 있다는 장점이 있다.
  생성자로 의존받는 객체에 접근이 가능하므로 순수한 자바 코드로 단위 테스트를 작성하는것이 쉽다는 장점이 있다.
  순환 참조 에러를 방지할 수 있다는 장점이 있다
  
  그러므로 의존성 주입 방법에서 생성자 주입 방법을 추천한다
  
  findAll() 메서드나 findByName() 메서드는 직접 JPQL 쿼리를 작성해서 가져왔다
  (SQL은 테이블 대상으로 쿼리, 조회를 하고 / JPQL은 엔티티 대상으로 조회한다)
  

  회원 서비스)
  회원 서비스에서는 회원 가입을 하는 join() 메서드와 
  회원을 전체 조회할 findMembers() 메서드와 회원을 아이디로 조회할 findOne() 메서드로 구성되어 있다.
  
  MemberService 클래스는 데이터 베이스의 작업을 처리하므로 @Transactional 어노테이션을 추가한다
  (Transaction이란 데이터베이스의 상태를 변경하는 작업 또는 한번에 수행되어 연산들을 의미한다
   @Transcational 어노테이션은 해당 클래스에서 Transaction 처리를 지원해주는 어노테이션이다)
  @Transactional 어노테이션 옵션을 readOnly = true로 설정하는데 그 이유는 데이터 베이스에서 읽기 작업만 할 경우
  성능 최적화를 해주므로 readOnly 옵션을 true로 설정한다
  만약 수정 작업을 할 경우 데이터 베이스의 반영이 안되므로 수정작업을 할 메서드는 @Transactional 어노테이션을 따로 추가해준다
  
  도메인 모델 패턴이란 도메인 부분에서 비즈니스 로직을 갖고 객체지향의 특성을 활용하는 패턴이다.
  (도메인이란 소프트웨어를 개발하는 대상 영역을 의미한다)
  
  트랜잭션 스크립트 패턴이란 엔티티에 비즈니스 로직이 거의 없고 서비스 계층에서 대부분 비즈니스를 처리하는 패턴을 의미한다.
  
  한 프로젝트에서 도메인 모델 패턴 / 트랜잭션 스크립트 패턴을 이용하거나 둘다 이용하는 경우도 있다
  이번 프로젝트에서 도메인 모델 패턴을 이용한다.
  
  
  회원 서비스 테스트)
  @SpringBootTest 어노테이션을 추가하여 스프링 부트 환경에서 테스트를 진행하도록 설정하였다
  @Transactional 어노테이션을 추가하여 테스트가 끝나고 데이터 베이스를 롤백하도록 하였다
  (테스트를 할 경우 실제 사용하는 데이터 베이스와 공용해서 사용할 경우 문제가 발생할 수 있으므로
  테스트용 데이터베이스를 따로 설정하는데 test 패키지 경로에 applictaion.yaml 파일을 설정하여
  실제 사용하는 데이터 베이스가 아닌 메모리를 이용하여 임시 데이터 베이스를 이용할 수 있도록 하였다
  
  테스트 코드는 given / when / then 순서로 작성하였다
  given 에서 이러한 조건들이 주어졌다는걸 정의하고
  when 에서 테스트할 작업을 실행하고
  then 에서 기대한 값과 맞는지를 비교한다.
  
  assertThorws() 메서드를 이용하여 해당 에러가 발생할 경우 통과하고 그렇지 않을경우 통과하지 않도록 테스트 코드를 작성하였다.
  
  
  상품 엔티티 비즈니스 로직)
  도메인 모델 패턴을 이용하므로 도메인(엔티티)에서 비즈니스 로직을 구현한다.
  상품 엔티티에서 수량이 증가하고 감소하는 addStock() 메서드와 removeStock() 메서드를 구현하였다
  (이렇게 Setter를 이용해서 맴버 변수를 수정하는게 아닌 비즈니스 메서드를 이용하여 맴버 변수를 수정한다)
  removeStock() 메서드를 실행할때 0보다 미만의 값으로 내려갈 수 있으므로 NotEnoughStockException 클래스를 만들어 Exception이 발생하도록 하였다 
  (NotEnoughStockException 클래스는 RuntimeException 클래스를 상속받았다)
  
  상품 리포지토리에서 상품을 저장하는 save() 메서드 / id로 상품을 찾는 findOne() 메서드 / 상품을 모두 찾는 findAll() 메서드가 있다
  
  여기서 상품을 저장하는 save() 메서드에서 상품의 id가 null 일 경우 em.persist() 로 데이터 베이스에 상품을 저장한다
  (id가 없을 경우 아직 데이터 베이스에 저장하지 않았으므로 persist() 메서드를 이용하여 영속성 컨텍스트에 해당 아이템을 저장한다)
  (참고로 persist() 메서드를 실행하여 영속성 컨텍스트에 저장한다 해도 바로 DB에 저장되지 않는다 commit을 해야 DB에 저장된다)
  
  상품의 id가 null이 아닐 경우 이미 데이터 베이스에 저장된 엔티티를 수정한다 보고, merge() 메서드를 실행한다.
  그리고 상품 서비스 클래스 구현한다.
  
  
  주문 엔티티)
  주문 엔티티에서 배송 엔티티와 상품주문 엔티티를 관리하므로 Cascade 옵션을 설정하여
  주문 엔티티가 영속될 경우 배송 엔티티와 상품주문 엔티티도 함께 영속화 되도록 설정하였다 (cascade = CascadeType.ALL)
  (Cascade란 특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶을때 사용하는 옵션이다)
  
  주문 엔티티에서 주문 생성 메서드를 createOrder() 메서드를 생성하는데
  Member, Delivery, OrderItem 을 인자로 전달받아
  Order를 생성하여 Member를 설정하고 Delivery를 설정한다
  그리고 Order의 OrderItem과 OrderItem의 Order를 설정한다
  마지막으로 order의 상태를 OrderStatus.ORDER로 설정하고 시각을 설정한다.
  
  주문 취소 메서드에서 해당 배송의 상태가 완료였다면 예외를 발생시켜 취소를 못하게 하였고
  배송의 상태가 완료가 아니라면 해당 주문의 배송상태를 CANCEL로 변경한다
  그리고 Order의 OrderItem들의 수량을 주문 취소한 만큼 되돌려 놓았다.
  
  주문의 전체 가격을 조회하는 getTotalPrice() 메서드에서는
  OrderItem들의 리스트를 조회하여 총 가격을 구했다.
  
  
  주문 서비스)
  주문을 할 경우 Order() 메서드에서 Member와 Item의 ID로 해당 Member, Item 엔티티를 찾았고
  Member의 정보로 Delivery 엔티티를 생성하였다
  그리고 아이템을 갖고 OrderItem을 생성하였고
  (OrderItem을 생성할때 해당 Item의 수량을 주문 수량만큼 감소시킨다)
  Member, delivery, orderItem으로 Order를 생성하였다
  마지막으로 생성한 Order를 save() 메서드로 저장하였다
  그리고 해당 order의 id를 반환하였다
  
  주문 취소를 할 경우 cancelOrder() 메서드에서 orderId로 해당 order를 찾아서
  order.cancel() 메서드를 실행하였다. 
  (order.cancel() 메서드에서 해당 orderItem 목록들을 순회하여 orderItem의 개수를 주문 취소한 수량만큼 증가시키고
  해당 order의 상태를 CANCEL로 변경하였다)
  
  주문 서비스 테스트)
  주문 서비스 테스트에서 상품주문을 할 경우 
  주문의 상태가 ORDER / 주문한 상품 종류 수 / 주문 총 가격 / 주문 재고가 제대로 됐는지를 테스트 하였다
  
  상품 주문시 재고수량이 초과될 경우 Exception이 발생해야되는데 
  재고 수량을 초과한 주문을 테스트하여 Exception이 발생했는지를 테스트 하였다
  (assertThrows() 메서드를 사용하여 Exception이 발생했는지를 확인하였다)
  
  주문 취소를 할 경우 주문의 상태가 CANCEL이 되어야 하고 주문이 취소된 상품의 제고가 증가됐는지 테스트 하였다
  
  
3. 동적 쿼리
   검색을 하는 findAll() 메서드에서 검색 조건에 따라 동적으로 쿼리를 생성하여 주문 엔티티를 조회할려고 한다
   (해당 회원의 주문 / 주문 상태에 따라서 등)
   
   동적 쿼리를 만드는 방법에는 JPQL로 처리하는 방법이 있다
   하지만 JPQL 쿼리를 문자로 생성하기는 번거롭고 실수로 인한 버그가 충분히 발생할 수 있다는 문제점이 있다
   
   동적쿼리를 만드는 방법에는 JPA Criteria로 처리하는 방법이 있다
   하지만 JPA Criteria는 JPA 표준 스펙이지만 실무에서 사용하기에는 너무 복잡하다 그래서 잘 사용하지 않는다
   
   그래서 동적쿼리를 만들때는 QueryDsl을 사용하여 만든다.
   
   
   
   
  
  
  
  
