# 2022 04 28 Study

1. IOC
- IOC(Inversion of Control)란 제어의 역전을 의미하며 객체의 제어관리가 프로그래머에서 프레임워크로 넘어갔음을 의미한다.

2. DI
- DI(Dependency Injection)이란 의존성 주입을 의미하며 
  각각의 계층이나 서비스간의 의존관계가 존재할 경우 프레임워크가 연결시키는것을 의미한다.

3. Spring Bean 
- Spring Bean 이란 Spring 프레임 워크에 의해 생성되고 관리되는 객체를 의미한다.

- Spring FrameWork에서 Bean을 얻어올려면 ApplicationContext.getBean()과 같은 메서드를 사용한다.
- @Component 어노테이션을 사용하여 해당 클래스를 Spring Bean에 등록할 수 있다.

- 라이브러리 같이 (List나 컬렉션등) 수정이 불가능한 클래스를 Spring Bean에 직접 등록하는 방법은
  @Bean 어노테이션을 이용해서 등록이 가능한데 객체를 반환하는 메서드만 @Bean 어노테이션을 사용할 수 있다.
- 여러개의 @Bean을 등록할려면 @Configuration 어노테이션을 클래스에 추가하여 여러개의 Spring Bean을 등록할 수 있다.
  (@Configuration 어노테이션은 1개의 클래스에서 여러개의 Spring Bean을 등록할것이라는 annotation이다)
- @Qualifier 어노테이션을 이용하여 Spring Bean의 이름을 재정의 할 수 있다.

- 스프링 프레임 워크에서는 @Bean이나 @Component 어노테이션을 이용하여 프로그래머가 직접 객체를 생성하는것이 아닌
  스프링 프레임 워크가 객체의 생성관리 권한을 넘겼다. (IOC와 DI)
  
4. AOP
- AOP(Aspect of Programming)이란 관점 지향 프로그래밍을 의미한다.
  핵심 비즈니스 로직에 있는 공통 관심사항을 분리하여 각각을 모듈화 하는것을 의미한다.
  
- @Aspect 어노테이션은 AOP를 적용시킬 클래스를 나타내는 어노테이션이다.
  (AOP를 적용시킬려면 스프링 프레임워크가 관리해야되므로 @Component 어노테이션을 추가해야된다)
 
- @PointCut 어노테이션이란 AOP를 적용시킬 지점(메소드)를 설정한다.
  @PointCut 설정값으로 execution 키워드를 사용할 수 있는데 
  execution이란 표현식을 이용하여 PointCut을 적용시킬 메서드의 범위를 지정한다
  (@PointCut에 언제 무엇을 적용할지 정하는 메서드를 Advice라고 한다)
  
- @Before 어노테이션이란 @PointCut으로 지정한 메서드가 실행되기 전에 실행되는 메서드를 설정한다
  @Before로 설정한 메서드에 JoinPoint로 @PointCut으로 설정한 함수의 정보를 얻어올 수 있다
  (JointPoint jointPoint.getArgs()로 @PointCut으로 설정한 함수의 메소드 인자를 얻어올수도 있다);

- @AfterReturning 어노테이션은 @PointCut으로 지정한 메서드가 실행되고 나서 실행되는 메서드를 설정한다
  @AfterReturning에 설정한 메서드에 JoinPoint로 @PointCut으로 설정한 함수의 정보를 얻어올수 있고
  @AfterReturning에 returning 키워드를 이용하여 @PointCut으로 설정한 메서드의 return값을 받아올수 있다.

- 특정 어노테이션을 설정할때 AOP를 적용하고 싶은 경우도 있는데 
  먼저 특정 어노테이션을 설정해야된다 
  
  어노테이션 설정값으로 @Target 어노테이션이 있는데 
  @Target은 새로 정의한 어노테이션이 적용할 위치나 성립될수 있는 위치를 설정하는 어노테이션이다
  Element.TYPE 은 타입을 선언할떄 적용하는 키워드이며
  Element.METHOD는 메서드를 선언할때 적용하는 키워드이다.
  
  @Retention 어노테이션은 해당 어노테이션이 언제까지 유지할지 알려주는 어노테이션이다.
  RetentionPolicy.RUNTIME은 어노테이션이 런타임동안 해당 어노테이션이 참조 가능하다는것을 설정하는 키워드이다.
  
  새로운 어노테이션을 정의했으면
  AOP를 적용할려는 함수에 @PointCut(@annotation(어노테이션 경로)) 어노테이션을 추가한다.
  
- @Around 어노테이션은 @PointCut으로 등록한 메서드가 실행되기전 실행 된 후를 관리하는 메서드를 설정하는 어노테이션이다
  @Around 어노테이션으로 등록한 메서드는 ProceedingJoinPoint 변수로 받을 수 있다
  @Around 어노테이션으로 등록한 메서드에서 ProceedingJoinPoint.proceed(); 메서드를 실행하면 
  @PointCut으로 등록한 메서드가 실행되고 @PointCut으로 등록한 메서드의 반환값을 리턴한다.
  (@Around 어노테이션을 사용하는 이유 중 하나는 함수의 시간 측정 관리에서 사용한다)
  

5. 인터넷 통신
- 인터넷 통신은 클라이언트 > 인터넷 > 서버의 과정으로 통신한다

6. IP
- IP란 인터넷 프로토콜을 의미하며 목적지 서버를 찾는것을 의미한다.
- 클라이언트는 IP 주소를 할당받고 패킷이라는 통신 단위로 데이터를 전달한다.

- 프로토콜이란 컴퓨터나 원거리 통신장비 사이에서 데이터나 메세지를 주고받는 양식과 규칙을 의미한다.

- IP 프로토콜의 한계는 
  태상 서비스가 불가능이여도 패킷을 전송한다는 비 연결성이 있고
  패킷이 손실되거나 패킷 전달 순서가 잘못될 수 있다는 비 신뢰성이 있다
  그리고 하나의 IP주소에서 통신에 필요한 프로그램을 구별하지 못한다는 한계가 있다.
  
7. TCP 
- TCP란 전송제어 프로토콜을 의미한다 
- TCP는 보내는측과 전송받는 측이 서로 연결되어 있어야 데이터를 전달하며
  데이터 전달과 데이터 전송 순서를 보장한다.
  
- 인터넷 프로토콜 4계층
  애플리케이션 계층 (HTTP , FTP)
  전송계층 (TCP , UDP)
  인터넷 계층 (IP)
  네트워크 인터페이스 계층으로 이루어져 있다.
  
8. UDP
- IP와 기능이 거의 같으며 Port가 추가되었다는 특징이 있다
- 데이터 순서가 보장되지 않지만 데이터 전달 속도가 빠르다는 장점이 있다.

9. Port
- Port란 같은 IP내에서 프로그램을 구분하는 역할을 한다.

10. DNS
- DNS란 Domain Name Service를 의미하며 ip를 다른 이름으로 변경한 주소를 의미한다.

11. URI / URN / URI
- URI는 리소스를 식별하는 통일된 방식을 의미한다
- URI의 종류에는 URN과 URI가 있다

- URN은 이름으로 리소스를 구별하는 방식을 의미하는데
  이름으로 리소스를 구분하는 방법이 보편화되지 않아 URI를 많이 사용한다.
  
- URI 위치로 리소스를 구별하는 방식을 의미한다.


  
