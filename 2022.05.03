# 2022 05 03 Study

Naver 검색 API를 연동하여 맛집을 찾는 사이트를 만들려고 한다

1. 먼저 맛집의 정보를 저장하는 DataBase를 설계한다.
   맛집의 정보들을 분류해서 1개의 Class로 관리한다.
   맛집의 정보 DataBase에 접근하는 class의 인터페이스를 설계해서 어떠한 메서드로 DataBase에 접근할지 설계한다.
   그리고 @Repository 어노테이션을 추가한 클래스를 이용하여 DataBase에 접근하도록 한다.
   (Repository란 DB에 접근하는 클래스의 메소드들을 사용하기 위해 정의한 인터페이스이다)
   (@Repository 어노테이션이란 해당 클래스에서 DB에 접근하고 이용할것이라고 알려주는 어노테이션이다)
   DB를 인터페이스로 설계했고 그 설계한 인터페이스를 상속받아 구현한 WishListEntity 클래스를 만든다.
   (DB에 WishListEntity 클래스 인스턴스들을 저장한다)
   
   Entity란 데이터의 집합을 의미하고 저장되고 관리되어야 하는 데이터를 의미한다.


2. Naver api를 이용하여 Naver Server와 통신할 NaverClient 클래스와 Naver Http api에 전달할 
   SearchImageReq (네이버 서버에 이미지 요청할 자료형) / SearchImageRes (네이버 서버에 요청한 이미지의 결과를 저장하는 자료형)
   SearchLocalReq (네이버 서버에 검색 요청할 자료형) / SearchLocalRes (네이버 서버에 요청한 검색 결과를 저장하는 자료형)
   클래스를 정의한다. 
   
   네이버 서버에 요청을 할때 header 정보가 필요하다면 HttpHeader를 이용해서 header를 만들어 header 정보를 추가하고
   HttpEntity에 header 정보를 추가해서 Naver 서버에 요청을 보낸다
   (HttpEntity에 header와 body정보를 보낼 수 있다)
   
   SearchImageRes/SearchLocalRes에 배열 형태인 items를 반환할 경우 그 배열의 요소들을 따로 내부 클래스로 만들고 그 내부 클래스를
   List 형태로 저장하는 형식으로 설계한다
   
   NaverController로 통신하여 SearchImageReq/SearchLocalReq 클래스로 네이버 서버에 요청을 전달하고 
   요청한 결과로 네이버 서버에서는 SearchImageRes/SearchLocalRes 클래스로 반환한다.
   
   RestTemplate.exchange() 메소드를 이용하여 네이버 서버에 요청을 보내고 Response를 얻는다.
   (RestTemplate란 스프링이 제공하는 HTTP통신에 유용하게 사용될 수 있는 템플릿을 의미한다)
   
   yaml을 이용하여 네이버 url에 관한 정보들을 저장할 수 있다
   (yaml이란 데이터 표현 양식의 한 종류이다)
   
   @Value 어노테이션이란 Property 파일에 있는 내용을 Spring 변수에 저장할 수 있게 하는 어노테이션이다
   (yaml을 이용하여 property 파일에 네이버 url을 저장하고 그 url을 @Value 어노테이션으로 가져와서 Spring 변수에 저장한다)
   

3. 클라이언트 요청에 대해 올바른 정보를 제공하기 위해 Service 클래스를 만든다
   @Service 어노테이션이란 해당 클래스가 비즈니스 로직을 처리한다고 알려주는 어노테이션이다
   
   클라이언트에서 요청을 하면 Service에서 해당 요청을 정리해서 Naver api에 필요한 Request를 만들어 Naver 서버에 요청을 보내고
   Naver 서버에서 응답이 온것을 Service에서 클라이언트에서 필요한 내용으로 처리하여 클라이언트로 보내는 역할을 한다
   
   Service 역할을 할 WishListService 클래스를 만들어서 클라이언트에서 오는 요청의 작업을 정리해서 Naver 서버에 요청을 하고
   Naver 서버에서 온 응답을 처리해서 클라이언트에서 필요한 내용으로 처리하여 클라이언트로 보낸다.
   
   클라이언트(프론트엔드)에서 제공하는 정보를 WishListDto 클래스로 정의하고 서버 DB에 저장하는 DB를 WishListEntity 클래스로 정의한다
   WishListDto 클래스나 WishListEntity 클래스는 서로 비슷하지만 다른 클래스로 나눈 이유는
   DB에 정보(WishListEntity)가 변경되면 프론트엔트의 정보(WishListDto)도 영향이 가므로 두 클래스를 나누었다
   
 
4. 마지막으로 PageController를 만들어서 프론트엔드랑 백엔드를 연동시켰다.


정리하자면 
ApiController에서 요청을 보내면 Service인 WishListService 클래스에서 ApiController에 해당되는 작업을 처리한다
Naver api를 이용하여 서버에 요청을 보내는 작업이라면 Naver api를 호출하는데 필요한 Request를 만들어
NaverController에게 WishListService에서 만든 Request클래스와 요청을 보낸다
Naver Controller에서는 WishListService에서 전달받은 Request 클래스로 uri를 만든다
그리고 헤더를 만들고 HttpEntity로 헤더 정보를 추가한다.
RestTemplate를 이용하여 위에서 만든 uri와 HttypEntity를 이용하여 Naver 서버에 요청을 보내고 응답을 받는다.
그리고 다시 WishListService 클래스로 돌아와 클라이언트로 반환할 데이터로 처리하여 
Naver 서버에서 받은 응답을 클라이언트로 반환한다.
마지막으로 프론트엔드와 백엔드를 연결할 PageController를 만들어서 백엔드에서 나온 데이터를
프론트 엔드로 보여주는 작업을 한다.
   
   
   
