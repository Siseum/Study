# 2022 05 10 Study

1. 연관관계 매핑
- 객체를 테이블에 맞추어 데이터 중심으로 모델링하면 협력관계를 만들 수 없다는 문제점이 있다.
  테이블은 외래 키로 조인을 이용해서 연관된 테이블을 찾지만 
  객체는 참조를 사용해서 연관된 객체를 찾는다는 차이점이 있다.
  
  객체를 테이블에 맞추어 모델링을 할 경우 연관관계가 없으므로 외래키를 이용해서
  연관관계에 있는 객체를 찾는 식으로 프로그래밍을 해야되는데 이러한 방식은
  객체 지향적인 방법이 아니다
  
  엔티티들간의 연관관계를 맺는 방향은 단방향 관계와 양방향 관계가 있다
  단방향 관계란 두 엔티티가 관계를 맺을 떄 한 쪽의 엔티티만 참조하고 있는것을 의미한다.
  양방향 관계란 두 엔티티가 관계를 맺을 때 양 쪽의 엔티티가 참조하고 있는것을 의미한다.
  
  객체 지향적 모델링을 하기 위해서 객체들의 연관관계를 사용한다.
  @ManyToOne 어노테이션은 객체의 맴버 변수에 N:1 단방향 연관관계를 설정하는 어노테이션이다
  @JoinColumn 어노테이션은 외래키를 매핑할때 사용하는 어노테이션이다
  
  @ManyToOne 어노테이션을 이용하여 해당 맴버 변수가 N:1 단방향 연관관계임을 설정하고
  @JoinColumn 어노테이션을 이용하여 해당 맴버 변수와 외래키를 매핑하는 설정을 한다.
  
  @OneToMany 어노테이션은 객체의 맴버 변수에 1:N 단방향 연관관계를 설정하는 어노테이션이다
  mappedBy는 @OneToMany 쪽의 컬랙션에 설정하여 연관관계의 주인이 아님을 설정하는것이다
  
  테이블은 외래키 하나로 두 테이블의 연관관계를 관리하는데 엔티티를 단방향으로 매핑하면 참조를 하나만 사용하고
  양방향 관계로 설정하면 객체의 참조는 둘인데 외래키는 하나미으로 두 엔티티중 하나를 연관관계의 주인으로 정해서
  테이블의 외래키를 관리해야된다 @ManyToOne쪽을 연관관계의 주인으로 설정하여 외래키를 관리하도록 하고
  @OneToMany 쪽을 mappedBy로 설정하여 @OneToMany가 연관관계의 주인이 아님을 설정한다.
  
  연관관계의 주인만이 외래키를 수정하고 등록할 수 있다
  주인이 아닌쪽은 읽기만 가능하다
  주인은 mappedBy 속성을 사용하지 않는다
  주인이 아니면 mappedBy 속성으로 주인을 지정한다.
  
  양방향 매핑시 연관관계의 주인에 값을 입력해야한다.
  하지만 JPA 코드 내에서 값을 조회하는 등 순수한 객체관계를 고려하면 항상 양쪽 다 값을 입력해야된다.
  양쪽 다 값을 입력해야되므로 연관관계 편의 메소드를 재정의하여 사용하는 경우도 있다.
  
  단방향 매핑만으로 연관관계 매핑은 완료되었지만
  양방향 매핑이 필요한 이유는 반대 방향으로 조회하는 경우가 필요해 양방향 매핑을 사용한다.
  
  연관관계의 주인은 외래키의 위치를 기준으로 정해야된다.
  주로 @ManyToOne에 해당하는 객체가 연관관계의 주인으로 설정한다.
  
  
  
