# 2022 05 10 Study

1. 연관관계 매핑
- 객체를 테이블에 맞추어 데이터 중심으로 모델링하면 협력관계를 만들 수 없다는 문제점이 있다.
  테이블은 외래 키로 조인을 이용해서 연관된 테이블을 찾지만 
  객체는 참조를 사용해서 연관된 객체를 찾는다는 차이점이 있다.
  
  객체를 테이블에 맞추어 모델링을 할 경우 연관관계가 없으므로 외래키를 이용해서
  연관관계에 있는 객체를 찾는 식으로 프로그래밍을 해야되는데 이러한 방식은
  객체 지향적인 방법이 아니다
  
  엔티티들간의 연관관계를 맺는 방향은 단방향 관계와 양방향 관계가 있다
  단방향 관계란 두 엔티티가 관계를 맺을 떄 한 쪽의 엔티티만 참조하고 있는것을 의미한다.
  양방향 관계란 두 엔티티가 관계를 맺을 때 양 쪽의 엔티티가 참조하고 있는것을 의미한다.
  
  객체 지향적 모델링을 하기 위해서 객체들의 연관관계를 사용한다.
  @ManyToOne 어노테이션은 객체의 맴버 변수에 N:1 단방향 연관관계를 설정하는 어노테이션이다
  @JoinColumn 어노테이션은 외래키를 매핑할때 사용하는 어노테이션이다
  
  @ManyToOne 어노테이션을 이용하여 해당 맴버 변수가 N:1 단방향 연관관계임을 설정하고
  @JoinColumn 어노테이션을 이용하여 해당 맴버 변수와 외래키를 매핑하는 설정을 한다.
  
  @OneToMany 어노테이션은 객체의 맴버 변수에 1:N 단방향 연관관계를 설정하는 어노테이션이다
  mappedBy는 @OneToMany 쪽의 컬랙션에 설정하여 연관관계의 주인이 아님을 설정하는것이다
  
- 다대일 매핑
  테이블은 외래키 하나로 두 테이블의 연관관계를 관리하는데 엔티티를 단방향으로 매핑하면 참조를 하나만 사용하고
  양방향 관계로 설정하면 객체의 참조는 둘인데 외래키는 하나만으로 두 엔티티중 하나를 연관관계의 주인으로 정해서
  테이블의 외래키를 관리해야된다 @ManyToOne쪽을 연관관계의 주인으로 설정하여 외래키를 관리하도록 하고
  @OneToMany 쪽을 mappedBy로 설정하여 @OneToMany가 연관관계의 주인이 아님을 설정한다.
  
  연관관계의 주인만이 외래키를 수정하고 등록할 수 있다
  주인이 아닌쪽은 읽기만 가능하다
  주인은 mappedBy 속성을 사용하지 않는다
  주인이 아니면 mappedBy 속성으로 주인을 지정한다.
  
  양방향 매핑시 연관관계의 주인에 값을 입력해야한다.
  하지만 JPA 코드 내에서 값을 조회하는 등 순수한 객체관계를 고려하면 항상 양쪽 다 값을 입력해야된다.
  양쪽 다 값을 입력해야되므로 연관관계 편의 메소드를 재정의하여 사용하는 경우도 있다.
  
  단방향 매핑만으로 연관관계 매핑은 완료되었지만
  양방향 매핑이 필요한 이유는 반대 방향으로 조회하는 경우가 필요해 양방향 매핑을 사용한다.
  
  연관관계의 주인은 외래키의 위치를 기준으로 정해야된다.
  주로 @ManyToOne에 해당하는 객체가 연관관계의 주인으로 설정한다.
  
- 일대다 매핑
  일대다 단방향 매핑은 일대다(1:N) 관계에서 1이 연관관계의 주인으로 단방향 매핑하는것을 의미한다.
  테이블 일대다 관계는 항상 다(N) 쪽에 외래키가 있다.
  객체와 테이블의 차이 때문에 일(1)쪽에서 다(N)쪽의 외래키를 관리하는 구조가 된다.
  (일대다 매핑을 할때 @JoinColumn을 반드시 사용해야된다 그렇지 않으면 조인테이블 방식을 사용한다)
  
  일대다 매핑보다 다대일 매핑 구조를 선호하는데
  일대다 단방향 매핑의 단점은
  엔티티가 관리하는 외래키가 다른 테이블에 있어
  연관관계 관리를 위해 추가로 UPDATE SQL문장을 실행하고 SQL문장을 파악하기 힘들다는 단점이 있다.
  (일(1)쪽을 업데이트 했는데 다(N)쪽이 업데이트 되므로 구조파악이 힘들어질 수 있다)
  
  일대다 양방향도 있는데 일대다 양방향 매핑은 공식적으로 존재하지 않는다
  일대다 매핑구조에서 다(N)쪽에서 일(1)쪽으로 조회하고 싶을때 일대다 양방향 매핑구조로 설계하는데
  다(N)쪽에서 @JoinColumn(insertable=false, updatable=false) 이라는 읽기전용 필드를 사용해서 양방향 처럼 사용한다.
  (양방향 관계에서 @OneToMany는 연관관계의 주인이 될 수 없으므로 다쪽에서도 @JoinColumn 어노테이션을 추가한다)
  되도록이면 다대일 양방향으로 설계하는것을 추천한다.
  
- 일대일 매핑
  일대일 매핑은 일대일(1:1) 관계에서 주 테이블이나 대상 테이블 중 외래키를 선택해서 매핑하는것을 의미한다.
  일대일 매핑에서는 외래키가 있는 테이블에 해당하는 객체에서 연관관계의 주인이 될 수 있다
  외래키가 있는 테이블에 해당하는 객체에서 @OneToOne 어노테이션과 @JoinColumn 어노테이션을 이용해서
  연관관계의 주인으로 설정하고 외래키가 아닌 테이블에서는 @OneToOne 어노테이션에 mappedBy 속성을 사용해서
  연관관계의 주인이 아님을 설정한다 (다대일 양방향 매핑과 비슷하다)
  (일대일 단방향 매핑에서 대상테이블에 외래키 단방향관계이면 JPA가 지원하지 않는다)
   (연관관계의 주인 객체와 외래키의 테이블이 다른경우)
  
  일대일 매핑에서
  주 테이블에 외래키를 설정할 경우
  주 객체가 대상 객체의 참조를 가지는것처럼 주 테이블에서 외래키를 두고 대상 테이블을 찾을 수 있다
  주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인이 가능해서 JPA 매핑이 편리하다는 장점이 있다.
  
  단점은 값이 없을 경우 외래키에 NULL을 허용한다.
  
  대상 테이블에 외래키를 설정할 경우
  주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 경우 테이블 구조가 유지된다
  
- 다대다 매핑
  다대다 매핑은 다대다(N:M) 연관관계에서 매핑하는것을 의미한다
  관계형 데이터베이스에서는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없지만
  객체는 컬렉션을 이용해서 객체 2개로 다대다 관계가 가능하다
  그러므로 연결 테이블을 추가해서 일대다 / 다대일 관계로 풀어내야된다.
  
  다대다 매핑은 @ManyToMany 어노테이션을 사용하고 @JoinTable로 연결테이블을 지정한다
  
  다대다 매핑은 실무에서 사용하지 않는데 
  그 이유는 중간 연결관계에 있는 테이블에 정보를 추가할수 없고
  조회를 하는 등 예상과 다른 쿼리가 나올 수 있으므로 다대다 매핑은 사용하지않고
  연결 테이블용 엔티티를 추가하여 일대다 다대일 관계로 풀어나간다.
  
  






  
  
