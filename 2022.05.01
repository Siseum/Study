# 2022 05 01 Study

1. Filter
- Filter란 Spring Framework에서 Client로 오는 요청/응답에 대해서 최초/최종 단계에서 처리할 수 있는 코드 영역을 의미한다.
- Filter 코드영역에서 프로그래머는 Client가 보낸 요청/응답의 정보를 변경하거나 순수한 클라이언트의 요청/응답 값을 확인할 수 있다.
- Filter 단계에서 유일하게 클라이언트의 요청/응답의 정보가 담긴 ServletRequest / ServletResponse 객체를 전달받을 수 있다.
  (Filter 단계에서 Client 요청의 선처리 / 후처리 과정이 가능해 business logic에서 로그 / 인증과 같은 기능을 분리할 수 있다는 장점이 있다)
  
- Filter를 특정 구역에 적용하는 방법이 있는데 @WebFilter 어노테이션을 이용하여 특정 클래스나 메서드에 Filter를 적용할 수 있다
  (@WebFilter 어노테이션을 사용할려면 서블릿 어노테이션을 스캔해서 빈으로 등록하는 @ServletComponentScan 어노테이션을 어플리케이션에서 추가해야된다)
  
- Filter에서 Servlet으로 전달받은 ReqeustBody를 BufferedReader 클래스로 읽을경우 파일 포인터가 끝으로 갔으므로 
  Controller에서는 RequestBody를 읽고 사용할 수 없게 된다 
  그러므로 Filter 부분에서 Servlet으로 전달받은 RequestBody를 사용할려면 
  ContentCaching(Request/Response) Wrapper 클래스를 새로 생성해서 이용해야 된다.
  
  ContentCaching 클래스는 Filter의 전처리 부분에서 데이터를 가져오지 않고 Filter.dofilter() 메서드를 실행해야지
  클라이언트에서 전달받은 Servlet Request/ Servlet Response의 내용을 복사하여 저장한다
  그러므로 Servlet Request / Servlet Response 내용을 이용할려면 Filter의 dofilter() 메서드를 실행하고 난 뒤에 사용해야된다.
  (Filter의 전처리 과정은 Filter.dofilter() 메서드를 실행하기 전이며 Filter의 후처리 과정은 Filter.dofilter() 메서드를 실행하고 난 뒤이다)
  
- RequestBody란 HTTP 요청 몸체를 자바 객체로 전달받은 것이다 
- ResponseBody란 자바 객체를 HTTP 요청 몸체로 전달하는 것이다.
  

2. Interceptor 
- Interceptor는 Controller의 핸들러를 호출하기 전과 후의 요청에 대한 참조하거나 수정할 수 있는 코드 영역을 의미한다.
  (Handler란 사용자가 요청한 url에 따라 실행되어야할 메서드를 의미한다)
  
- Interceptor는 Filter와 하는 역할이 비슷하지만 
  Filter와의 차이는 Interceptor는 Spring Context를 참조할 수 있지만 Filter는 Spring Context를 참조할 수 없다.

- Interceptor를 구현할 객체는 HandlerInterceptor 인터페이스를 상속받아 구현해야되며
  Interceptor를 Spring에 등록해야된다 
  Interceptor를 등록할 객체는 WebMvcConfigurer 인터페이스를 상속받아 구현해야된다.
  (WebMvcConfigurere 인터페이스를 상속받아 addInterceptors 함수에서 Interceptor를 등록한다)
  
- Interceptor는 특정 어노테이션을 추가하여 특정 어노테이션만 적용되게 구현이 가능하다
  (어노테이션을 재정의하는데 @Retention 어노테이션과 @Target 어노테이션을 이용하여 재정의한다
   @Retention 어노테이션은 어노테이션이 실제로 적용되고 유지되는 범위를 설정하는 어노테이션이다
   @Target 어노테이션은 자바 컴파일러가 어노테이션이 어디에 적용될지 결정하기 위해 사용되는 어노테이션이다)
   
- HandlerMethod란 @RequestMapping 이나 하위 어노테이션(@GetMapping, @PostMapping 등)이
  붙은 메소드르 정보를 추상화한 객체를 의미한다. 
  
- @Service 어노테이션은 해당 객체나 클래스를 Spirng Bean에 등록하는 @Component와 역할이 같은데
  해당 클래스나 메서드가 비즈니스 로직을 처리한다고 알려주는 어노테이션이다.
  
  
3. 비동기 처리
- @Async 어노테이션은 비동기 작업을 처리하는 메서드를 설정하는 어노테이션이다.
- @EnableAsync 어노테이션은 Spring FrameWork에서 비동기 기능을 활성화 하는 어노테이션이다
- CompletableFuture 클래스는 비동기 메서드로부터 반환값을 전달받아서 처리가 필요한 경우 사용한다.

4. RestTemplate
- RestTemplate란 스프링에서 제공하는 http 통신에서 유용하게 사용될 수 있는 템플릿을 의미한다 
- Spring Code에서 UriBuilder로 Uri를 만들고 RestTemplate 인스턴스를 생성하여 RestTemplate의 getForObject() / getForEntity() 함수 등으로
  클라이언트와 서버가 통신할 수 있도록 한다 
  (RestTemplate를 이용하여 웹 -> 클라이언트 Spring -> 외부 api가 있는 ServerSpring 이런 순서로 서버와 클라이언트간의 통신을 할 수 있도록 한다)
- 클라이언트와 서버간의 통신을 할때 Request/Response Entity로 전달하거나 전달받을 수 있는데 
  Request/Response Entity로 전달하거나 전달받을경우 
  Header(HTTP 상태코드를 저장하는 부분) 와 Body(통신에서 전달되는 실제 내용(객체나 Json파일))을 한꺼번에 전달할 수 있다는 장점이 있다
- UriComponentBuilder 클래스의 queryParam() 함수를 이용하여 uri에 쿼리를 추가할 수 있고 Server에 uri 정보도 전달할 수 있다
  (Server에서는 매개변수에 쿼리 정보를 받을려면 @RequestParam 어노테이션을 사용한다)
  
- postForObject() / postForEntity() 함수 등으로 클라이언트에서 객체를 만들어서 Server에 해당 객체를 전달할 수 있다.
  (Http body -> Object -> Object Mapper -> Json -> RestTemplate -> http body Json 으로 변환된다)

- RestTemplate로 일반 객체가 아닌 RequestEntity를 Server로 전달할 수 있는데 uri와 header에 내용을 추가하고
  보낼 body(객체 / json)을 추가해서 ReqeustEntity를 만든다
  그리고 RestTemplate.exchange(RequestEntity, 서버에서 전달받을 클래스) 메서드를 이용해서 RequestEntity를 서버로 전달하고
  ResponseEntity를 서버와 통신 결과로 전달받는다.
  
- RequestEntity를 전달받은 서버는 헤더의 정보를 매개변수로 전달받을수 있는데 해당 함수의 인자에 @ReqeustHeader 어노테이션을 추가해서
  헤더의 정보를 전달받아 이용한다.
  
- ParameterizedTypeReference<>(){}; 란 제네릭 타입의 정보를 얻어오는 객체이다.

- 클라이언트가 서버에서 뭘 보내는지 모를 경우 HttpEntity<> 클래스를 인자로 전달받아 확인하는 방법이 있다.
  (HttpEntity<> 객체란 HTTP request에 대한 요청 / 응답에 대한 데이터를 저장하는 클래스이다)

  
 
