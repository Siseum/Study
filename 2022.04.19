# 2022 04 19 Study

1. HashSet
- HashSet 이란 객체를 저장하는 자료구조이며 중복된 객체를 저장하지 않는다.
- 객체 중복 여부를 재정의 하기 위해 equals()와 hashCode()를 재정의 한다.

2. TreeSet
- 객체의 정렬을 위해 사용하는 클래스이다.
- Set이랑 마찬가지로 중복된 객체의 저장을 허용하지 않고 오름차순 / 내림차순으로 객체를 정렬할 수 있다
- 비교 대상이 되는 객체(자료를 저장하는 객체)에 Comparable이나 Comparator 인터페이스를 구현해야 TreeSet에 추가될 수 있다.

- Comparable이란 자기자신의 객체와 다른 객체를 비교할때 사용하는 인터페이스이다
- Comparable 인터페이스를 구현하면 compareTo() 함수를 재정의 해야된다.
  예) implements Comparable<Member>
      public int compareTo(Member member)
      {
         ...
      }

- Comparator 이란 두 매개변수 객체를 비교할때 사용하는 인터페이스이다
- Comparator 인터페이스를 구현하면 compare() 함수를 재정의해야된다.
  예) implements Comparator<String>
      public int compare(String s1, String s2)
      {
         return (s1.compareTo(s2)) * (-1);
      }

- compareTo() 함수나 compare() 함수는 두 대상을 비교하여 먼저오는 오름차순으로 정렬할려면 양수 /
  내림차순으로 정렬할려면 음수 / 같으면 0을 리턴하도록 한다.
  
  
3. HashMap
- Key와 Value로 자료들을 관리하는 자료구조이다.
- 검색을 위해 사용하는 자료구조이다.
- Key가 되는 객체는 중복될 수 없고 객체의 유일성을 비교하기 위해 equals(), hashCode()를 오버라이딩 하여 재구현해야한다.
  예) Iterator<Integer> ir = hashMap.KeySet().iterator();
      while(ir.hasNext())
      {
         int key = ir.next();
         Member member = hashMap.get(key);
      }
  
  
4. TreeMap
- Map 인터페이스를 구현한 클래스이고 Key에 대한 정렬이 가능하다.
- Key가 되는 클래스에 Comparable이나 Comparator 인터페이스를 구현해야 된다.
  Key-Value 쌍의 자료구조를 Key값으로 정렬이 되므로 Comparable이나 Comparator 인터페이스를 오버라이딩해야 된다.


5. 내부 클래스 (중첩 클래스)
- 내부 클래스(중첩 클래스)는 클래스 내부에 선언한 클래스를 의미한다.
- 내부 클래스를 사용하는 이유는 외부 코드에 불필요한 관계 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.
- 내부 클래스에서는 내부 클래스의 static 변수 / static 메서드를 사용할 수 없다.
  그 이유는 외부 클래스가 생성되지 않으면 내부 클래스가 생성되지 않기 때문이다.
  
6. 정적 내부 클래스
- 외부 클래스와 생성과 무관하게 사용할 수 있는 내부 클래스이다
- static 변수 / static 메서드를 사용할 수 있다.

- 정적 내부 클래스에서 일반 메서드에서는 외부 클래스의 인스턴스 변수 사용이 불가능하다
  그 이유는 외부 클래스가 생성됐는지 여부를 알 수 없어 외부 클래스의 인스턴스 변수 사용이 불가능하다.
  
- 내부 클래스의 static 메서드에서는 외부 클래스의 인스턴스 변수 / 내부 클래스의 인스턴스 변수 사용이 불가능하다.
  그 이유는 static 메서드는 클래스 생성 여부와 관계없이 사용이 가능하므로 외부 클래스와 내부 클래스 생성 여부를 알 수 없어
  외부 클래스와 내부 클래스의 인스턴스 변수 사용이 불가능하다.
  
7. 지역 내부 클래스
- 메서드 내부에서 정의하여 사용하는 클래스이다
- 메서드 호출 이후에도 사용해야 하는 경우가 있을 수 있으므로 메서드 내부의 지역 변수나 매개변수는 final로 선언된다.
  (메서드 내부에서 클래스를 정의하고 메서드 내부에서 정의한 클래스를 나중에 호출할 수 있는데 
   그러면 메서드 내부의 매개변수와 지역변수는 존재하지 않아 에러가 발생하므로 메서드 내부의 지역변수나 매개변수를 final로 상수화한다)
   
8. 익명 내부 클래스
- 이름이 없는 클래스이다 
- 클래스 이름을 생략하고 주로 하나의 인터페이스나 하나의 추상클래스를 구현한다.
예) return new Runnable()
   {
     ...
   }
// 생성과 동시에 클래스를 정의한다.

Runnable runner = new Runnable()
{
  @Override
  public void run()
  {
     ...
  }
}
// 생성과 동시에 인터페이스를 구현한다.
  
9. 람다식
- 람다식이란 메소드를 하나의 식으로 표현한것을 의미한다.
- 람다식을 구현하면 익명의 내부 클래스가 만들어지고 이를 통해 객체가 생성된다.
예) (x,y) -> { return x + y; }; 

- 함수형 인터페이스란 람다식을 선언하기 위한 인터페이스이다 
- 람다식은 익명의 함수와 매개 변수만으로 구현되므로 함수형 인터페이스를 만들어야되고 
  함수형 인터페이스는 단 하나의 메서드만을 선언해야된다.
- 함수형 인터페이스를 알려주는 어노테이션 @FunctionalInterface 를 선언할 수 있다.

10. Stream
- 배열이나 컬랙션 요소를 하나씩 참조하여 람다식으로 처리할 수 있게 하는 문법이다.
- 한번 사용한 stream 은 재사용이 안되고 새로 생성해서 사용해야 된다.
- 중간연산과 최종연산이 있는데 최종연산을 해야 중간연산을 처리하는 지연 연산으로 처리한다.
- Stream 연산을 하더라도 기존의 자료형은 변경하지 않는다.

예) 배열의 스트림
IntStream is = Arrays.stream(arr);
is.forEach(n->System.out.println(n));

예) 리스트의 스트림
Stream stream = sList.stream()
stream.foreEach(s->System.out.println(s));

- Filter - 스트림 요소를 하나씩 평가해서 걸러내는 작업
- map -  스트림 내 요소들을 특정값으로 변환해준다.
- sort - stream 자료들을 정렬해준다.

11. reduce
- reduce란 Stream 연산에서 사용자가 처리하고 싶은 연산를 정의하는 문법이다.
- reduce는 stream의 원소들을 하나씩 소모하며 누적계산을 수행하고 결과값을 반환한다.
- reduce는 T reduce(T identity, BinaryOperator<T> accumulator) 로 정의되어있는데
  identity는 연산에 적용할 값이고 BinaryOperator<T> accumulator는 적용시킬 연산이다.
  
  예) Arrays.stream(arr).reduce(0, (a,b)->a+b));
  이렇게 람다식과 reduece 문법을 이용하여 stream에 적용할 연산자를 정의할 수 도 있지만
  적용할 연산자가 복잡하다면 BinaryOperator 인터페이스를 구현하여 적용시키는 방법도 있다.
  
  예) class CompareString implements BinaryOperator<String>
  {
      @Override
      public String apply(String s1, String s2)
      {
        ...
      }
  }
  // BinaryOperator 인터페이스를 구현한 클래스
  
  public class ReduceTest
  {
      public static void main(String[] args)
      {
          ...
          String str = Arrays.stream(greetings).reduce(new CompareString()).get();
      }
  }
  

