# 2022 05 20 Study

인프런 강의 실전! 스프링 부트와 JPA 활용1 강의를 듣고 공부한 내용 리뷰

1. SpringBoot의 application 설정을 yaml로 설정하였다
   (datasource / jpa / logging 등을 설정하였다)
   
   jpa hibernate 설정을 ddl-auto:create로 설정하였는데
   ddl-auto:create의 특징은 기존 테이블을 삭제 후 다시 생성한다는 특징이 있다 (DROP + CREATE)
   (ddl-auto란 Spring JPA에서 Hibernate를 이용하여 데이터 베이스 ddl을 사용하는 기능이다)
   (DDL이란 데이터 정의어(Data Defination Language)라고 하며 
    데이터베이스 테이블의 생성, 변경 삭제를 담당하는 명령어이다
    대표적으로 CRETAE, ALTER, DROP등이 있다)
   
   
   ddl-auto에 관한 설정값들이 여러개가 있는데
   create : 기존 테이블 삭제 후 다시 생성
   create-drop: create와 같으나 종료시점에 테이블을 DROP한다
   update : 변경 부분만 반영 (운영 DB에서 사용하면 안된다)
   validate: 엔티티와 테이블이 정상 매핑되었는지만 확인한다
   none: 사용하지 않음 (none이라는 설정값은 없는데 아무 설정을 하지 않았음을 표시한다)
   
   주의할점은 운영 장비에서는 절대 create, create-drop, update를 사용하면 안된다

   show_sql: true 옵션은 System.out.println()에 실행 SQL을 남긴다는 특징이 있다
   org.hibernate.SQL: debug 옵션은 logger를 통해 실행 SQL로그를 남긴다는 특징이 있다
   System.out.println()으로 로그를 남기는것은 좋지 않으므로 org.hibernate.SQL: debug 옵션을 사용하여
   logger로 실행 SQL로그를 남기는것이 좋다.
    
 
2. 도메인 분석과 설계
- 회원은 여러 주문을 할 수 있고 주문은 1개의 회원만 가질수 있으므로 회원과 주문은 일대 다 관계이다.

  주문과 배송은 각각 서로 1개만 선택할 수 있어 일대일 매핑을 하였다

  주문은 여러개의 상품을 선택할 수 있고 상품도 여러개의 주문을 선택할 수 있으므로 다대다 관계이다
  하지만 다대다 관계는 관계형 데이터 베이스나 JPA 엔티티에서도 사용하지 않는다
  그래서 주문 상품이라는 엔티티를 추가해서 다대다 관계를 일대다 / 다대일 관계로 풀어냈다
  (주문과 주문상품은 일대다 관계 / 상품과 주문 상품은 일대다 관계로 다대다 관계를 풀어냈다)
  
  참고로 다대다 관계를 사용하지 않는 이유는 데이터 베이스는 다대다 관계를 표현할 수 없고
  다대다 매핑을 할 경우 중간에 조인 테이블을 따로 생성해야되는데 조인 테이블에 정보를 추가할 수 없어
  다대다 매핑을 사용하지 않는다.
  
  상품은 도서 / 음반 / 영화로 구분되는데 상품이라는 공통 속성을 사용하므로 상속 구조로 표현했다
  
  카테고리는 여러개의 상품을 선택할 수 있고 상품도 여러개의 카테고리를 선택할 수 있으므로 다대다 관계로 표현했다
  
  회원 / 배송에서 주소에 관한 정보를 공통으로 사용하므로 
  Address 클래스를 생성하여 @Embedded 어노테이션을 추가한 뒤 복합 값 타입으로 사용하였다
  
  Item 클래스는 Album / Book / Movie 클래스와 상속관계를 갖는데 
  상속관계의 설정 싱글테이블 설정으로 하여 관리하도록 하였다 
  (@Inheritance(Strategy = InheritanceType.SINGLE_TABLE)
  
  상속관계의 전략에는 
  조인 전략(JOINED) : 부모타입과 자식 타입을 모두 테이블로 만들어 조회할때는 조인을 사용하여 조회하는 방식이다
  단일 테이블 전략(SINGLE_TABLE) : 테이블을 단 하나만 만든 후 부모의 속성과 자식의 속성을 모두 포함시키는 방법이다
  구현 클래스마다 테이블 전략(TABLE_PER_CLASS) : 부모 테이블을 만들지 않고 자식 테이블만 만들어서 
                                               각각의 테이블이 부모 타입의 속성을 갖게 만드는 전략이다 (사용하지 않는것이 좋다)
  
   상속관계에서 부모클래스에 @DiscrimnatorColumn 어노테이션을 추가하여 자식 클래스를 분류하는 컬럼을 만들고
   자식 클래스에서는 @DiscriminatorValue 어노테이션을 사용하여 자식 클래스를 분류하는 컬럼에 들어갈 값을 설정한다
   
   연관관계를 매핑할떄 두개의 엔티티가 서로의 엔티티를 참조할 경우 양방향 연관관계라고 한다
   데이터 베이스의 테이블은 외래키 하나로 양쪽의 테이블의 조인이 가능한데
   문제는 JPA객체에서 외래키를 어느 엔티티에서 관리할지 설정해야된다
   외래키를 관리하는 엔티티를 연관관계의 주인이라고 한다.
   
   양방향 연관관계에서 외래키를 관리하는 엔티티의 설정 기준은
   일대다 관계일 경우 다에 해당되는 엔티티에서 외래키를 관리하거나
   일대일 관계일 경우 많이 사용하는 엔티티에서 외래키를 관리한다.
   
   @JoinColumn(name= "외래 키 이름") 어노테이션은 외래 키를 매핑하는 어노테이션인데
   외래키를 관리하는 엔티티를 연관관계의 주인이므로 @JoinColumn() 어노테이션으로 연관관계의 주인을 설정한다
   
   
   
   
    
