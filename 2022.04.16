# 2022 04 16 Study

1. 접근 제어 지시자를 사용하는 이유
- 접근 제어 지시자를 사용하여 사용자가 객체의 맴버변수를 수정하는것을 방지해 객체를 보호할 수 있다
- 접근 제어 지시자를 사용하여 메서드에서만 맴버변수를 수정하게 한다면 해당 수정 메서드만 확인하면 되므로 디버깅이 용이하여 접근제어 지시자를 사용한다 

2. 캡슐화 
- 캡슐화란 객체와 관련있는 변수나 함수를 모아 클래스로 만들어 외부에서 쉽게 접근하지 못하도록 하는것이다
- 캡슐화를 하는 이유는 정보 은닉을 하여 객체의 데이터를 보존하고 보호하기 위한 하기 위해 캡슐화를 한다.

3. this
- this란 자기 자신의 인스턴스 메모리 주소값(참조값)을 반환하는 키워드이다.
- this는 생성자에서 다른 생성자를 호출할때도 사용이 된다.

4. static 
- Data 영역에 메모리를 할당하여 프로그램이 종료될때 할당받은 Data 메모리 영역을 해제한다는 키워드이다.
- static 맴버변수는 Data 영역에 생성되어 공통적으로 사용하는 변수이므로 인스턴스 생성없이 클래스의 이름만으로 사용이 가능하다
- static 메서드에서는 인스턴스 변수(맴버 변수) 사용이 불가능하다 (해당 인스턴스가 생성되지 않을 수 있으므로 맴버 변수 사용이 불가능하다)

5. code / data / heap / stack
- code 영역 : 명령어의 집합이나 언어에서 미리 정의한 내용들을 저장하는 메모리 영역이다
- data 영역 : static 변수나 / final 변수 등 정적 변수나 상수 변수 등을 저장하는 메모링 영역이다
- heap 영역 : 인스턴스를 new 키워드로 생성할 경우 생성한 인스턴스를 저장하는 메모리 영역이다
- stack 영역 : 함수를 호출될때 생성되고 함수가 끝나면 소멸되는 메모리 영역이다

6. sigleton 패턴
- 싱글톤 패턴이란 static 키워드를 이용하여 인스턴스를 1개만 생성할때 사용하는 디자인 패턴이다
- private static으로 해당 클래스 인스턴스를 1개만 생성하고 getInstance() 함수로 해당 클래스 인스턴스를 얻어와서 사용한다

7. 배열
- 배열이란 동일한 자료형의 순차적 자료구조이다
- 기본 자료형의 배열은 선언과 동시에 배열의 크기만큼 메모리가 할당되지만
  객체의 배열은 요소가 되는 객체의 주소값 (4 or 8 byte) 메모리만 할당되고 각 요소 객체는 생성해서 저장해야된다.
  
8. 얕은 복사 / 깊은 복사
- 얕은 복사는 인스턴스의 주소값만을 복사하는 것이다
- 깊은 복사는 인스턴스의 주소값이 아닌 객체의 내용을 복사하는 것이다.

- 얕은 복사를 할 경우 원본 인스턴스나 카피한 인스턴스의 내용을 변경할 경우
  원본 인스턴스와 카피한 인스턴스의 내용이 변경된다는 특징이 있다
  
- 깊은 복사를 할 경우 원본 인스턴스의 값을 변경해도
  카피한 인스턴스의 값이 변경되지 않는다는 특징이 있다
  
9. ArrayList
- ArrayList는 List 인터페이스를 상속받은 클래스이며 크기가 가변적으로 변하는 선형 List 자료구조이다.
 
 
 
