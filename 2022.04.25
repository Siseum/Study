# 2022 04 25 Study

1. 객체지향 프로그래밍
- 객체지향 프로그래밍이란 객체의 관점에서 프로그래밍 하는것을 의미하며
  객체지향의 특성은 추상화 / 상속/ 승닉 / 재사용 인터페이스 등이 있다.
  
- 캡슐화란 연관된 목적을 가진 변수와 함수를 모아 하나의 클래스로 만들고 클래스의 속성을 보호하는것을 의미한다.
  
- 추상화란 클래스를 정의할때 불필요한 부분은 생략하고 객체의 중요한 속성들로 클래스를 정의하는것을 의미한다.

- 상속이란 상위클래스의 특성들을 재사용하여 사용하거나 상위 클래스의 기능들을 재정의(오버라이딩)하여 사용할 수 있는 기능을 의미한다.
- 상속의 효과는
  최상위 클래스만 보고도 프로그램 구조를 파악하여 프로그램 구조에 대한 이해도가 상승할 수 있다
  상속을 이용하면 해당 클래스에 필요한 속성과 메서드를 다시 정의하지 않아도 되므로 코드의 재사용성을 높일 수 있다.
  
- 다형성이란 하나의 객체가 여러 타입이 될 수 있는것을 의미한다.
- 다형성의 장점은 하나의 타입으로 여러 객체를 관리할 수 있어 코드의 유지보수에 용이하다.


2. 객체지향 설계 5원칙 SOLID
- 좋은 소프트웨어 설계를 위해서 결합도를 낮추고 응집도는 높여야 된다.
- 모듈이란 소프트 웨어가 기능별로 나눠진 것을 의미한다.

- 결합도란 모듈간의 상호의존하는 정도를 의미한다.
- 응집도란 모듈 내부에 존재하는 구성 요소들이 얼마나 기능적으로 관련있는지를 나타내는 것이다.

- 단일 책임의 원칙
  하나의 객체는 오직 하나의 동작에만 책임을 갖도록 설계하는 원칙이다.

- 개방 폐쇄의 원칙
  객체의 확장은 개방적으로 객체의 수정은 폐쇄적으로 설계하는 원칙이다
  다른 객체를 확장하는건 허용하지만 객체의 확장으로 인해 객체를 갖고 실행하는 부분은 수정하지 않아야 된다.
  
- 리스코프 치환 원칙
  부모 객체를 호출하는 동작에서 자식 객체가 완전히 부모 객체를 대체할 수 있다는 원칙이다.
  
- 인터페이스 분리 원칙
  클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안된다.
  (객체가 반드시 필요한 기능만 갖도록 제한하는 원칙이다)
  
- 의존 역전의 원칙
  객체는 저수준 모델보다 고수준 모델에 의존해야된다.
  고수준 모델) 인터페이스 같은 객체의 형태나 개념
  저수준 모델) 구현된 객체
  
  
3. 디자인 패턴
- 디자인 패턴이란 자주 사용하는 설계 패턴과 문제 해결 방법을 정리해 놓은 것

- 싱글톤 패턴이란 어떤 객체가 유일하게 1개만 존재해야될때 사용하는 디자인 패턴이다

- Adapter 패턴이란 클래스의 인터페이스를 다른 인터페이스로 변환하는 패턴이다
  인터페이스를 다른 인터페이스로 변환해줄 어뎁터 클래스를 만들고 
  어뎁터 클래스에서는 변환할 인터페이스를 저장한다 
  함수 호출 시 변환할 인터페이스의 함수가 호출되도록 설계한다.
  
- Proxy 패턴이란 프록시 객체를 통해 기본 객체에 접근하는 디자인 패턴이다
  (프록시란 대리자를 의미한다)
  
- 데코레이터 패턴은 기본 객체는 유지하지만 
  객체에 기능을 추가하는 Decorator 객체를 생성하여 기존 객체에 기능을 추가하는 패턴이다.
  
- Observer 패턴은 어떤 객체의 상태가 변할때 그 객체에 미리 등록한 객체들에게 알림을 보내는 디자인 패턴이다.

- Facade 패턴이란 어떤 서브 시스템의 공통적인 기능을 정의하여 단순화된 상위 수준의 인터페이스를 제공하는 패턴

- strategy 패턴이란 객체들이 할 수 있는 기능들을 전략 클래스로 캡슐화 하여
  객체의 행위를 변경할때 객체를 변경하는것이 아닌 전략만 변경하여 유연하게 확장하는 디자인 패턴을 의미한다.
   
   
   
