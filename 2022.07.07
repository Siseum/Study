# 2022 07 07 Study

1. 싱글톤
- 스프링은 객체를 싱글톤 패턴으로 관리한다
  여러 고객이 웹 애플리케이션에 요청할때마다 새로운 객체를 생성하면 
  메모리 낭비가 심하므로 싱글톤 패턴으로 클래스 인스턴스를 1개만 생성하여 공유되도록 객체를 관리한다
  
- 싱글톤 패턴은 클래스 인스턴스가 1개만 생성된다는 장점이 있다
  싱글톤 패턴의 단점은 
  싱글톤 패턴을 구현하는 단점은 싱글톤 패턴을 구현하는 코드 자체가 많다
  의존 관계상 클라이언트가 구체 클래스에 의존하므로 DIP(의존 관계 역전의 원칙)을 위반한다
  유연성이 낮고 테스트 하기가 어렵다
  내부 속성을 변경하거나 초기화가 어렵다
  
- 스프링 컨테이너는 싱글톤 패턴을 적용하지 않아도 객체 인스턴스를 싱글톤으로 관리하므로
  싱글톤 패턴의 단점은 해결하면서 모든 객체를 싱글톤으로 유지할 수 있다는 장점이 있다
  (싱글톤 패턴을 위한 코드를 넣지않아도 되며 DIP, OCP, 테스트, private 생성자로부터 자유롭게 싱글톤을 사용할 수 있다)
  
  스프링 컨테이너란 자바 객체의 생명 주기를 관리하고 생성된 자바 객체들에게 추가적인 기능을 제공하는 역할을 한다.
  (스프링 프레임워크가 관리하는 자바 객체를 스프링 빈이라고 한다)
  
- 싱글톤 방식은 여러 클라이언트가 하나의 객체 인스턴스를 공유하므로 싱글톤 객체는 상태를 유지하게 설계하면 안된다.
  특정 클라이언트에 의존적인 필드가 있으며 안된다
  특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다
  가급적 읽기만 가능해야된다
  스프링 빈의 필드에 공유 값을 설정하면 큰 문제가 발생할 수 있다.
  
  
- @Configuration 어노테이션이란 스프링 프레임 워크에서 설정파일을 만들거나 스프링 빈을 등록하기 위한 어노테이션이다
  @Configuration을 적용하면 바이트 코드 조작 라이브러리를 이용하여 싱글톤을 보장한다.
  
  
- Spring Bean을 사용하는 이유는 
  객체를 싱글톤으로 관리함으로써 메모리를 최적화 할 수 있고
  DI(의존관계 주입)를 통해 Spring Bean을 생성하므로 클래스간의 의존도를 최소화 할 수 있다는 장점이 있다
  DI를 통해 스프링 빈을 생성하므로 구현 클레스에 의존하지 않아도 되므로 의존관계 역전의 원칙을 지킬 수 있고
  DI를 통해 스프링 빈을 생성하므로 구현 클래스를 수정하지 않고도 설계 구조를 변경할 수 있어 개방 폐쇄의 원칙을 지킬 수 있다
  IOC(제어의 역전)을 통해 객체의 제어는 스프링 프레임워크가 담당하게 되므로 생성과 구현 기능을 분리함으로써 개방폐쇄의 원칙을 지킬 수 있다.
  
  @Bean 어노테이션이란 개발자가 제어하는것이 불가능한 라이브러리를 수동으로 스프링 빈으로 등록하기 위해 사용하는 어노테이션이다.
  
 
- DI(의존관계 주입)이란
  외부에서 객체를 생성하고 관리하면서 의존 관계를 연결해주는 것을 의미한다.
  
  IOC(제어의 역전)이란
  메소드나 객체의 호출 작업을 프로그래머가 아닌 외부에서 결정되는것을 의미한다.
  
  
- 중첩 클래스를 스프링 빈으로 등록할 경우 중첩 클래스는 static으로 과
 
  
