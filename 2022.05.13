# 2022 05 13 Study

1. 서브 쿼리
- 서브 쿼리란 다른 쿼리 내부에 포함되어 있는 SELECT 문을 의미한다.
  서브쿼리에는 [NOT] EXISTS / ALL / ANY (SOME) / IN 이 있다
  EXISTS는 서브쿼리에 결과가 존재하면 참을 리턴하는 서브쿼리이다
  ALL은 모든 조건이 만족하면 참을 리턴하는 서브쿼리이다
  ANY(SOME)은 조건을 하나라도 만족하면 참을 리턴하는 서브쿼리이다
  IN은 서브쿼리의 결과중 하나라도 같은 것이 있으면 참을 리턴하는 서브쿼리이다.
  
  서브쿼리 예제)
- 팀A 소속인 회원
  SELECT m FROM Member m
  WHERE EXISTS (SELECT t FROM m.team t WHERE t.name = '팀A');
  
- 전체 상품 각각의 재고보다 주문량이 많은 주문들
  SELECT o FROM Order o
  WHERE o.orderAmount > ALL(SELECT p.stockAmount from Product p);
  
- 어느 팀이든 팀에 소속된 회원
  SELECT m FROM Member
  WHERE ANY(SELEC T FROM Team t);
  
- JPA에서 서브 쿼리의 한계는
  JPA는 WHERE, HAVING 절에서만 서브 쿼리 사용이 가능하다.
  하이버네이트에서만 SELECT 절에서도 서브쿼리가 가능하다
  FROM절의 서브쿼리는 현재 JPQL에서 불가능하다
  (조인으로 풀 수 있으면 풀어서 해결하거나 Native 쿼리를 사용하여 직접 쿼리를 DB에 전송한다)
  
- 서브 쿼리를 사용할 경우 메인 쿼리에서 사용하는 엔티티와 
  서브 쿼리에서 사용하는 엔티티를 분리해서 사용해야 쿼리 성능이 좋아진다.
  
  
2. JPQL의 타입 표현
- JPQL에서 문자는 ' ' 로 표현하고
  숫자는 10L(Long), 10D(Double), 10F(Float)으로 표현한다
  Boolean은 TRUE, FALSE 로 표현한다
  
  ENUM을 사용할 경우 패키지명을 포함해서 사용해야된다 (jpabook.MemberType.Admin)
  (파라미터 바인딩을 하지 않을 경우 ENUM의 패키지 명이 포함된 ENUM명을 작성해야되지만
   파라미터 바인딩을 할 경우 ENUM 클래스 명만 작성해도 된다)
  Enum 사용시 기본 타입은 숫자이므로 @Enumerated(EnumType.String)으로 설정을 변경해서 사용하는게 좋다
  (Enum을 Enum 변수명이 아닌 숫자로 사용할 경우 Enum 구조가 변경되면 Enum 구조 파악이 어렵다는 문제점이 있다)
  
  특정 엔티티 타입정보를 사용하고 싶다면 type(m) = Member 이런식으로 사용해야된다
  (상속관계에서 다형성을 이용하여 해당 엔티티 타입으로 엔티티를 찾고싶을때 사용한다)
  
  SQL이랑 문법이 비슷하고 EXISTS / IN / AND, OR, NOT / =, >, >=, <M <= / BETWEEN, LIKE, IS NULL 등을 사용할 수 있다. 
  (IN 연산자는 OR 연산자와 같은 역할을 하며 WHERE 조건에서 하나라도 만족하는 행을 반환하는 연산자이다)
  
  
  
  
  
