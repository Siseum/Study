# 2022 05 13 Study

1. 서브 쿼리
- 서브 쿼리란 다른 쿼리 내부에 포함되어 있는 SELECT 문을 의미한다.
  서브쿼리에는 [NOT] EXISTS / ALL / ANY (SOME) / IN 이 있다
  EXISTS는 서브쿼리에 결과가 존재하면 참을 리턴하는 서브쿼리이다
  ALL은 모든 조건이 만족하면 참을 리턴하는 서브쿼리이다
  ANY(SOME)은 조건을 하나라도 만족하면 참을 리턴하는 서브쿼리이다
  IN은 서브쿼리의 결과중 하나라도 같은 것이 있으면 참을 리턴하는 서브쿼리이다.
  
  서브쿼리 예제)
- 팀A 소속인 회원
  SELECT m FROM Member m
  WHERE EXISTS (SELECT t FROM m.team t WHERE t.name = '팀A');
  
- 전체 상품 각각의 재고보다 주문량이 많은 주문들
  SELECT o FROM Order o
  WHERE o.orderAmount > ALL(SELECT p.stockAmount from Product p);
  
- 어느 팀이든 팀에 소속된 회원
  SELECT m FROM Member
  WHERE ANY(SELEC T FROM Team t);
  
- JPA에서 서브 쿼리의 한계는
  JPA는 WHERE, HAVING 절에서만 서브 쿼리 사용이 가능하다.
  하이버네이트에서만 SELECT 절에서도 서브쿼리가 가능하다
  FROM절의 서브쿼리는 현재 JPQL에서 불가능하다
  (조인으로 풀 수 있으면 풀어서 해결하거나 Native 쿼리를 사용하여 직접 쿼리를 DB에 전송한다)
  
- 서브 쿼리를 사용할 경우 메인 쿼리에서 사용하는 엔티티와 
  서브 쿼리에서 사용하는 엔티티를 분리해서 사용해야 쿼리 성능이 좋아진다.
  
  
2. JPQL의 타입 표현
- JPQL에서 문자는 ' ' 로 표현하고
  숫자는 10L(Long), 10D(Double), 10F(Float)으로 표현한다
  Boolean은 TRUE, FALSE 로 표현한다
  
  ENUM을 사용할 경우 패키지명을 포함해서 사용해야된다 (jpabook.MemberType.Admin)
  (파라미터 바인딩을 하지 않을 경우 ENUM의 패키지 명이 포함된 ENUM명을 작성해야되지만
   파라미터 바인딩을 할 경우 ENUM 클래스 명만 작성해도 된다)
  Enum 사용시 기본 타입은 숫자이므로 @Enumerated(EnumType.String)으로 설정을 변경해서 사용하는게 좋다
  (Enum을 Enum 변수명이 아닌 숫자로 사용할 경우 Enum 구조가 변경되면 Enum 구조 파악이 어렵다는 문제점이 있다)
  
  특정 엔티티 타입정보를 사용하고 싶다면 type(m) = Member 이런식으로 사용해야된다
  (상속관계에서 다형성을 이용하여 해당 엔티티 타입으로 엔티티를 찾고싶을때 사용한다)
  
  SQL이랑 문법이 비슷하고 EXISTS / IN / AND, OR, NOT / =, >, >=, <M <= / BETWEEN, LIKE, IS NULL 등을 사용할 수 있다. 
  (IN 연산자는 OR 연산자와 같은 역할을 하며 WHERE 조건에서 하나라도 만족하는 행을 반환하는 연산자이다)
  

3. 조건식
- JPQL에서는 CASE 식을 사용할 수 있다
  
  기본 CASE 식
  예) SELECT
       CASE WHEN m.age <= 10 then '학생요금'
            WHEN m.age >= 60 then '경로요금'
            else '일반 요금'
       END
      FROM Member m;
   
  단순 CASE 식
  SELECT
   CASE t.name
     WHEN '팀A' then '인센티브110%'
     when '팀B' then '인센티브120%'
     else '인센티브 105%'
   END
  FROM Team t;
  
- COALESCE란 하나씩 조회해서 null이 아니면 반환한다
  예) 사용자 이름이 없으면 이름 없는 회원을 반환
  SELECT COALESCE(m.username, '이름 없는 회원') FROM Member m;

  NULLIF란 두 값이 같으면 null 반환, 다르면 첫번째 값을 반환한다
  예) 사용자 이름이 '관리자'면 null을 반환하고 나머지는 본인의 이름을 반환
  SELECT NULLIF(m.username, '관리자') FROM Member m;
  
- JPQL에서는 SQL이 지원하는 기본 함수들을 사용할 수 있다
  CONCAT / SUBSTRING / TRIM / LOWER, UPPER / LENGTH / LOCATE / ABS, SQRT, MOD / SIZE, INDEX 등

- JPQL에서는 사용자 정의 함수를 호출할 수 있다
  하이버 네이트에서 사용자 정의 함수를 호출할려면 데이터베이스 방언에 해당 함수를 등록해야된다
  (사용하는 DB 방언을 상속받고 사용자 정의 함수를 등록해야 한다)
  
  예) SELECT FUNCTION('group_concat', i.name) from Item i;
  
  
4. 경로 표현식
- 경로 표현식이란 .(점)을 찍어 객체 그래프를 탐색하는것을 의미한다
  
  상태 필드란 단순히 값을 저장하는 필드이다 (m.username 등)
  
  연관 필드란 연관 관계를 위한 필드를 의미한다
  - 단일 값 연관 필드란
    @ManyToOne, @OneToOne에서 엔티티인 필드를 의미한다. (엔티티 객체인 m.team)
  - 컬랙션 값 연관 필드란
    @OneToMany, @ManyToMany에서 컬랙션인 필드를 의미한다 (엔티티를 컬랙션(List 등)으로 저장한 객체 m.orders)
    
  상태 필드에서는 경로 탐색이 끝나고 더이상 탐색이 불가능하다
  단일 값 연관 경로에서는 묵시적인 내부 조인이 발생하고 탐색이 더 가능하다
  컬랙션 값 연관 경로에서는 묵시적인 내부조인이 발생하고 더이상 탐색이 불가능하다. 
  (컬랙션 중에서 어느것을 가져와야 될지 모르기 떄문에 컬랙션 값 연관 경로에서는 더이상 탐색이 불가능하다)
  (FROM 절에서 명시적인 조인을 통해 별칭을 얻으면 별칭을 통해 경로탐색이 가능하다)
  
  상태 필드 경로 탐색 예)
  JPQL) SELECT m.username, m.age from Member m;
  
  단일 값 연관 경로 탐색 예)
  JPQL) SELECT o.member FROM Order o;
  (Order 엔티티 객체가 저장하고 있는 엔티티 객체 member를 조회하기 위해 묵시적인 내부조인이 발생한다)

  경로 탐색의 묵시적 조인은 항상 내부조인이 발생하고
  컬랙션을 경로탐색할 경우 더이상 탐색이 불가능하다
  컬랙션을 경로탐색하여 더 탐색하고 싶을 경우 명시적 조인을 통해 별칭을 얻어야된다
  경로탐색은 주로 SELECT WHERE 절에서 사용하지만 묵시적 조인으로 이해 SQL의 FROM(JOIN) 절에 영향을 줄 수 있다.
  
  묵시적인 내부조인은 쿼리 구조파악이 힘드므로 실무에서는 명시적인 내부조인을 사용해야 된다
  예) SELECT m FROM Member m join m.team t; 과 같이 명시적인 내부조인을 사용해야 된다.


5. 페치 조인(fetch join)
- JPQL에서 연관된 엔티티나 컬렉션을 SQL로 한번에 함꼐 조회하는 기능을 의미한다
  (SQL 조인 종류가 아니고 JPQL에서 제공해주는 기능이다)
  
  예) 회원을 조회하면서 연관된 팀도 함께 조회할려고 한다
  JPQL) SELECT m FROM Member m join fetch m.team;
  SQL) SELECT M.*, T.* FROM MEMBER M
       INNER JOIN TEAM T ON M.TEAM_ID = T.ID;
  
  일반 JOIN을 했을 경우 team과 연관된 Member만 SQL로 가져온다
  그리고 SQL로 가져온 Member의 team 이름을 조회했을 경우
  team이름의 조회 횟수만큼 join 쿼리를 DB에 전송한다는 문제점이 있다
  그러므로 fetch join을 이용하여 Member와 Team을 한번에 가져온다.
  
  일대다 관계나 컬렉션을 조인으로 데이터를 조회한다면
  중복으로 인해 데이터가 늘어나므로 조심해야된다
  예) JPQL) SELECT t FROM Team t join fetch t.members WHERE t.name = '팀A'; (팀은 1 / 맴버는 다 이므로 일대다 관계이다)
  위 쿼리문의 결과로 같은 팀이 중복되어 저장될 수 도 있다
  
  일대다 관계나 컬렉션을 조인으로 조회 할 경우 데이터의 중복을 제거하는 방법에는 DISTINCT 를 사용하면 된다
  SQL에서 DISTINCT는 중복된 결과를 제거하는 명령인데 SQL의 DISTINCT를 사용할 경우 
  조인으로 인한 엔티티가 완벽히 일치하지 않으므로 정상적으로 중복이 제거되지 않는 문제점이 있다
  
  그러므로 JPQL에서 DINSTINCT 기능을 따로 제공하는데 
  SQL에서 DISTINCT를 추가하는 역할을 하고
  애플리케이션에서 엔티티 중복을 제거해 주는 역할을 한다
  그래서 DISTINCT를 이용하여 일대다 관계나 컬랙션을 조인으로 조회시 중복되는 데이터를 제거할 수 있다
  
   일반조인은 연관된 엔티티를 함께 조회하지 않는다
   페치 조인을 사용할 경우 연관된 엔티티도 함께 조회한다 
   페치 조인은 객체 그래프를 SQL로 한번에 조회하는 개념이다.
  
  
6. 페치 조인의 특징과 한계
 - 페치 조인 대상에는 별칭을 줄 수 없다
   (하이버네이트는 가능하지만 가급적 사용하지 않는것을 권장한다)
   (페치 조인의 결과는 모든 엔티티가 있을것이라고 가정하고 사용해야 되므로 페치 조인의 대상에는 별칭을 줄 수 없다)
   
   둘 이상의 컬랙션은 페치 조인 할 수 없다
   
   컬랙션을 페치 조인하면 페이징 API(setFirstResult, setMaxResults)를 사용할 수 없다
   (일대다 / 컬랙션은 페치 조인이 되지 않지만 
    다대일은 페치조인이 되므로 다대일로 페치조인하여 페이징을 사용하는 방법이 있다)
   (일대일, 다대일 같은 단일 값 연관 필드들은 페치 조인해도 페이징이 가능하다
    하이버네이트는 경고로그를 남기고 메모리에서 페이징을 하는데 매우 위험하다)
    
    페치조인은 엔티티에 직접 적용하는 글로벌 로딩 전략보다 우선해서 적용된다
    (OneToMany(fetch=FetchType.LAZY) // 글로벌 로딩 전략
   
    컬렉션을 페이징할 경우 페치 조인을 사용할 수 없게된다
    그러므로 @BatchSize() 어노테이션을 이용해 N+1 문제를 해결한다
    (@BatchSize 어노테이션은 연관된 엔티티를 조회할때 지정된 size만큼 SQL의 IN절을 사용해서 조회한다)
  

7. 다형성 쿼리
- JPA에서 type 키워드란 조회 대상을 특정 자식 엔티티로 한정하는 키워드이다
  예) Item 중에서 Book, Movie를 조회해라
  JPQL) SELECT i FROM Item i WHERE type(i) IN (Book, Movie);
  SQL) SELECT i FROM i WHERE i.DTYPE in ('B', 'M');
  (SQL에서는 type키워드가 DTYPE으로 변경된다)
  
  JPA에서 TREAT 키워드란 자바의 타입 캐스팅과 비슷하다.
  상속 구조에서 부모 타입을 특정 자식 타입으로 다룰 때 사용한다.
  FROM, WHERE, SELECT(하이버네이트 지원)에서 사용이 가능하다
  예) 부모인 Item과 자식 Book이 있다
  JPQL) SELECT i FROM Item i WHERE TREAT(i as Book).author = 'kim';
  SQL) SELECT i.* FROM Item i WHERE i.DTYPE='B' and i.author = 'kim';
  (SQL에서 TREAT 키워드가 DTYPE으로 변경된다)
   

8. 엔티티 직접 사용
- JPQL에서 엔티티를 직접 사용하면 SQL에서 해당 엔티티의 기본 키 값을 사용한다.
  JPQL) SELECT COUNT(m.id) FROM Member m; // 엔티티의 아이디를 사용
        SELECT COUNT(m) FROM Member m; // 엔티티를 직접 사용
  SQL) SELECT COUNT(m.id) as cnt from Member m;
  (엔티티를 직접 사용할 경우 SQL에서 해당 엔티티의 기본 값을 사용한다)
  
  JPQL에서 연관된 엔티티를 직접 사용할 경우 연관된 엔티티의 외래키 값을 사용한다.
  

9. Named 쿼리
- Named 쿼리란 미리 정의해서 이름을 부여해두고 사용하는 JPQL이다
  Named 쿼리는 정적 쿼리이다
  Named 쿼리는 애플리케이션 로딩 시점에 쿼리를 검증하므로 쿼리의 에러를 애플리케이션 로딩 시점에 검증할 수 있다는 장점이 잇다
  
  
10. 벌크 연산
- 벌크 연산이란 쿼리 한 번으로 여러 테이블의 행(엔티티)를 변경하는 것이다.
  executeUpdate() 메서드로 벌크 연산을 수행하고 리턴 값으로 영향 받은 엔티티의 수를 반환한다.
  UPDATE, DELETE를 지원해주고 INSERT는 하이버네이트에서 지원해준다
  
  예) int resultCount = em.createQuery(qlString)
                        .setParameter("stockAmount", 10)
                        .executeUpdate();
                        
  벌크 연산은 영속성 컨텍스트를 무시하고 데이터 베이스에 직접 쿼리하므로
  영속성 컨텍스트와 데이터 베이스의 데이터 불일치가 발생할 수 있다
  
  벌크 연산으로 인한 데이터 베이스와 영속성 컨텍스트의 불일치를 해결하기 위해서
  벌크 연산을 먼저 수행하는 방법이 있고
  벌크 연산을 수행 후 영속성 컨텍스트를 초기화 하는 방법이 있다.
  
  Flush는 Commit, Query, Flush를 호출할 경우 실행된다
  Flush는 영속성 컨텍스트의 내용을 DB에 반영한다
  (DB의 내용을 영속성 컨텍스트에 반영하지 않는다)
  

 
