# 2022 04 27 Study

1. web
- 웹이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미한다.

2. URI 
- URI란 리소스를 식별할 수 있는 통일된 방식을 의미한다.
- URI는 URL과 URN으로 구별이 가능하다.
- URL은 리소스의 위치를 지정하는 방식이다. (웹 주소에 해당된다)
- URN은 리소스의 이름을 부여하는 방식이다. 
  URN 이름만으로 자료를 식별할 수 있는 방법이 보편화 되지 않아 주로 URL로 리소스를 식별한다
  
- URL은 scheme://[userinfo@]host[:port][/path][?query][#frgment] 로 이루어져 있다
- schme에서는 주로 프로토콜을 사용한다 
  (http는 80포트 / https는 443 포트를 사용한다 / 포트는 생략이 가능하다)
  
- userinfo는 url에 사용자 정보를 포함해서 인증하지만 거의 사용하지 않는다

- host는 호스트명에 해당되고 도메인명 또는 ip주소를 직접 사용해도 된다

- port는 포트에 해당되고 일반적으로 생략한다 (http는 80 / https는 443 이다)
  (포트란 같은 ip 내에서 프로세스를 구분하는 것을 의미한다)
  
4. URI 설계원칙 
- / 는 계층 관계를 나타낼때 사용된다
- URI 마지막 문자는 / 을 포함하지 않는다
- -(하이픈)은 URI 가독성을 높이는데 사용된다.
- _(밑줄)은 사용하지 않는다.
- URI 경로에는 소문자가 적합하다.
- 파일 확장자는 URI 에 포함하지 않는다 / 프로그래밍 언어에 의존적인 확장자를 사용하지 않는다
- 구현에 의존적인 경로를 사용하지 않는다
- 세션 ID를 포함하지 않는다
- 프로그래밍 Method 명을 사용하지 앟는다.
- 명사에는 단수형보다 복수형을 사용해야 한다.
- 컨트롤러의 이름으로는 동사나 동사구를 사용한다.
- CRUD 기능을 나타내는것은 URI에 사용하지 않는다

5. HTML이란 (Hyper Text Markup Language)
- HyperText(웹페이지에서 다른 페이지로 이동할 수 있는것) 기능을 가진 문서를 만드는 언어이다.

6. HTTP란 (Hyper Text Transfer Protocol)
- 인터넷에서 데이터를 주고 받을 수 있는 프로토콜이다.
  (프로토콜이란 통신 규약을 의미하며 컴퓨터나 원가리 장비 사이에서 메세지를 주고받는 양식과 규칙을 의미한다)
  
7. REST란 (Representational State Transfer) 
- 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 것을 의미한다.

- REST는 클라이언트 / 서버 구조가 일관적인 인터페이스로 분리되어 있어야 한다.
- REST에서는 요청에 대해서는 클라이언트 상태를 서버에 저장하지 않는다 (Stateless)
- 클라이언트는 서버의 응답을 Cache(임시저장)할 수 있어야 한다.
- 서버와 클라이언트 사이에 방화벽 / 게이트웨이 / 프록시 등 다양한 계층 형태로 구성이 가능해야 하며 이를 확장할 수 있어야한다.
- 인터페이스의 일관성을 지키고 클라이언트와 서버가 독립적으로 개선될 수 있어야 된다.
- 특정한 기능을 서버로 부터 클라이언트가 전달 받아 코드를 실행할 수 있어야한다.

8. RESTful 조건
- 웹 기반의 REST에서 리소스에 접근할때 URI를 사용한다.
- 리소스 조작을 할때는 리소스 그 자체를 전달하는것이 아닌 메세지로 데이터를 전달한다.
  (서버의 리소스 이름이 변경되었을때 클라이언트는 서버 리소스의 이름이 변경되었는지를 알 수 없어
   리소스 그 자체를 전달하는것이 아닌 메세지를 통해 리소스를 전달하여 리소스를 수정하는 방식을 사용한다)
- 요청하는 데이터가 어떻게 처리 되어져야 하는지 충분한 데이터를 포함 할 수 있어야 한다.
  (GET / POST / PUT / DELETE)

9. Spring Boot란 


