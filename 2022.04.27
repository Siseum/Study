# 2022 04 27 Study

1. web
- 웹이란 인터넷에 연결된 사용자들이 서로의 정보를 공유할 수 있는 공간을 의미한다.

2. URI 
- URI란 리소스를 식별할 수 있는 통일된 방식을 의미한다.
- URI는 URL과 URN으로 구별이 가능하다.
- URL은 리소스의 위치를 지정하는 방식이다. (웹 주소에 해당된다)
- URN은 리소스의 이름을 부여하는 방식이다. 
  URN 이름만으로 자료를 식별할 수 있는 방법이 보편화 되지 않아 주로 URL로 리소스를 식별한다
  
- URL은 scheme://[userinfo@]host[:port][/path][?query][#frgment] 로 이루어져 있다
- schme에서는 주로 프로토콜을 사용한다 
  (http는 80포트 / https는 443 포트를 사용한다 / 포트는 생략이 가능하다)
  
- userinfo는 url에 사용자 정보를 포함해서 인증하지만 거의 사용하지 않는다

- host는 호스트명에 해당되고 도메인명 또는 ip주소를 직접 사용해도 된다

- port는 포트에 해당되고 일반적으로 생략한다 (http는 80 / https는 443 이다)
  (포트란 같은 ip 내에서 프로세스를 구분하는 것을 의미한다)
  
4. URI 설계원칙 
- / 는 계층 관계를 나타낼때 사용된다
- URI 마지막 문자는 / 을 포함하지 않는다
- -(하이픈)은 URI 가독성을 높이는데 사용된다.
- _(밑줄)은 사용하지 않는다.
- URI 경로에는 소문자가 적합하다.
- 파일 확장자는 URI 에 포함하지 않는다 / 프로그래밍 언어에 의존적인 확장자를 사용하지 않는다
- 구현에 의존적인 경로를 사용하지 않는다
- 세션 ID를 포함하지 않는다
- 프로그래밍 Method 명을 사용하지 앟는다.
- 명사에는 단수형보다 복수형을 사용해야 한다.
- 컨트롤러의 이름으로는 동사나 동사구를 사용한다.
- CRUD 기능을 나타내는것은 URI에 사용하지 않는다

5. HTML이란 (Hyper Text Markup Language)
- HyperText(웹페이지에서 다른 페이지로 이동할 수 있는것) 기능을 가진 문서를 만드는 언어이다.

6. HTTP란 (Hyper Text Transfer Protocol)
- 인터넷에서 데이터를 주고 받을 수 있는 프로토콜이다.
  (프로토콜이란 통신 규약을 의미하며 컴퓨터나 원가리 장비 사이에서 메세지를 주고받는 양식과 규칙을 의미한다)
  
7. REST란 (Representational State Transfer) 
- 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 것을 의미한다.

- REST는 클라이언트 / 서버 구조가 일관적인 인터페이스로 분리되어 있어야 한다.
- REST에서는 요청에 대해서는 클라이언트 상태를 서버에 저장하지 않는다 (Stateless)
- 클라이언트는 서버의 응답을 Cache(임시저장)할 수 있어야 한다.
- 서버와 클라이언트 사이에 방화벽 / 게이트웨이 / 프록시 등 다양한 계층 형태로 구성이 가능해야 하며 이를 확장할 수 있어야한다.
- 인터페이스의 일관성을 지키고 클라이언트와 서버가 독립적으로 개선될 수 있어야 된다.
- 특정한 기능을 서버로 부터 클라이언트가 전달 받아 코드를 실행할 수 있어야한다.

- API란 응용 프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 의미한다.

8. RESTful 조건
- 웹 기반의 REST에서 리소스에 접근할때 URI를 사용한다.
- 리소스 조작을 할때는 리소스 그 자체를 전달하는것이 아닌 메세지로 데이터를 전달한다.
  (서버의 리소스 이름이 변경되었을때 클라이언트는 서버 리소스의 이름이 변경되었는지를 알 수 없어
   리소스 그 자체를 전달하는것이 아닌 메세지를 통해 리소스를 전달하여 리소스를 수정하는 방식을 사용한다)
- 요청하는 데이터가 어떻게 처리 되어져야 하는지 충분한 데이터를 포함 할 수 있어야 한다.
  (GET / POST / PUT / DELETE)

9. Spring / Spring Boot
- Spring이란 자바 기반의 웹 어플리케이션을 만들 수 있는 프레임 워크입니다.
- Spring Boot란 Spring framework 기반 프로젝트를 복잡한 설정없이 쉽고 빠르게 만들어주는 라이브러리다

(라이브러리란 필요한 기능들이 모여있는 코드들의 모음이다
 프레임 워크란 작업의 구조가 정해져 있는 라이브러리다 
 라이브러리와 프레임 워크의 차이점은 코드 흐름의 제어권의 차이가 있는데
 라이브러리는 라이브러리의 코드를 프로그래머가 직접 호출해서 사용하는 반면
 프레임워크는 프로그래머가 작성한 코드를 프레임 워크에서 호출한다는 차이점이 있다
 그리고 이런 프레임워크의 동작 방식을 제어의 역전이라고 한다)
 
10. HTTP 메소드
- HTTP 메소드에는 GET / POST / PUT / DELETE등 이 있다.

- GET 메소드는 서버로부터 리소스를 요청하는 메서드를 의미하며 CRUD에서 R에 해당된다.
  서버에서 단순 요청을 하므로 멱등성과 안정성을 유지한다.
  PathVariable을 사용이 가능하며 Query Parameter 이용이 가능하다. 
  데이터를 전달하지 않으므로 DataBody를 사용하지 않는다.
 
- POST 메소드는 서버에 리소스를 새로 생성하는 메서드를 의미하며 CRUD에서 C에 해당된다.
  서버에 리소스를 매번 새로 생성하므로 멱등성과 안정성을 유지하지 않는다
  Path Variable을 사용이 가능하며 Query Parameter 이용이 가능하지만 데이터를 전달하므로 굳이 이용하지는 않는다.
  데이터를 전달하므로 DataBody를 사용한다.
  
- PUT 메소드는 서버에 리소스를 새로 생성하거나 이미 있을경우 갱신하는 메소드를 의미하며 CRUD에서 C / U에 해당된다.
  서버에 리소스를 생성하지만 있을경우 데이터를 반환하므로 멱등성을 유지한다
  하지만 서버의 상태를 변경하기 때문에 안정성은 유지하지 않는다.
  Path Variable 사용이 가능하며 Query Parameter 이용이 가능하지만 데이터를 전달하므로 굳이 이용하지는 않는다.
  데이터를 전달하므로 DataBody를 이용한다.
  
- DELETE 메소드는 서버에 리소스를 삭제하는 메소드를 의미하며 CRUD에서 D에 해당된다
  서버에 리소스를 삭제하지만 없을경우 아무 역할을 하지 않으므로 멱등성을 유지한다.
  하지만 서버의 상태를 변경하기 때문에 안정성은 유지하지 않는다
  Path Variable을 사용이 가능하며 Query Parameter 이용이 가능하다.
  데이터를 전달하지 않으므로 DataBody를 사용하지 않는다.
   
- CRUD란 
  CREATE(생성) / READ(읽기) / UPDATE(갱신) / DELETE(삭제)를 의미한다 

- 멱등성 / 안정성
  멱등성이란 특정 메서드를 여러번 요청해도 요청한 결과가 같은 성질을 의미한다.
  안정성이란 메서드를 실행하더라도 서버의 상태를 변경하지 않는 성질을 의미한다.

- Path Variable / Query Parameter
  Path Variable은 경로를 변수로 사용하는것을 의미하며
  Query Parmeter는 경로에 key와 value의 형태로 데이터를 제공하는것을 의미한다. 
  
11. Annotation
- @RestController) Rest API를 설정한다
- @RequestMapping) 리소스를 설정한다
- @GetMapping) Get Resource를 설정한다
- @RequestParam) URL 쿼리 정보를 얻어온다
- @PathVariable) URL 변수 경로의 정보를 얻어온다 

- @PostMapping) Post Resource를 설정한다
  @RequestBody) Request Body 부분을 얻어온다.
  @JsonProperty) Json 이름을 설정한다.
  @JsonNaming) 해당 클래스의 Json 이름 규칙을 설정한다.
  
- @PutMapping) Put Resource를 설정한다.

- @DeleteMapping) Delete Resource를 설정한다.

- @ResponseBody) RestController가 아닌 곳(Controller)에서 Json으로 데이터를 반환할때 사용한다.
  
12. MVC 패턴
- MVC 패턴이란 Model, View, Controller의 약자이며 각 레이어간 기능을 구분하는데 중점을 둔 디자인 패턴입니다.
- Model은 데이터 관리 및 비즈니스 로직을 처리하는 부분이다
- View는 비즈니스 로직의 처리 결과를 통해 인터페이스가 표현되는 구간입니다.
- Controller는 사용자의 요청을 처리하고 Model과 View를 중개하는 역할을 합니다.

13. @Controller / @RestController
- @Controller는 view를 반환하기 위한 어노테이션을 의미한다.
  @Controller를 사용하면서 Data를 반환하는 경우도 있는데 
  @ResponseBody 어노테이션을 활용하여 Json 형태로 데이터를 반환할 수 있게 된다.
  
- @RestController는 @Controller + @ResponseBody를 합친 문법이며
  Json 형태로 객체 데이터를 반환하는것을 의미한다.

14. DAT/DTO/VO
- DAO) Data Access Object는 데이터 베이스 data에 접근하기 위한 객체이다
- DTO) Data Transfer Object는 계층 간 데이터를 교환하기 위해 사용하는 객체
- VO) Value Object 실제 데이터만을 저장하는 객체를 의미한다.

15. ObjectMapper
- Text를 Object로 Object를 Text로 변환할 경우 ObjectMapper 클래스를 사용한다
- objectMapper.writeAsValueAsString() 메서드를 호출할 경우 Object에서 String으로 변환된다.
- objectMapper.readValue() 메서드를 호출할 경우 String에서 Object로 변환된다.

- wirteAsValueAsString() 메서드는 해당 클래스에 get() 메서드가 있어야된다.
- readValue() 메서드는 기본 생성자가 있어야 된다.

    
  
